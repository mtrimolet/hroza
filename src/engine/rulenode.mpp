export module engine.rulenode;

import std;
import glm;
import stormkit.core;
import utils;

import grid;
import potentials;

import engine.rewriterule;
import engine.match;

import engine.fields;
import engine.observes;
import engine.search;

using namespace stormkit;

// TODO: CRTP / deducing-this ?

export
struct RuleNode {
  enum struct Mode { ONE, ALL, PRL };
  Mode mode;

  std::vector<RewriteRule> rules;
  RewriteRule::Unions unions;

  enum struct Inference { RANDOM, DISTANCE, OBSERVE, SEARCH };
  Inference inference = Inference::RANDOM;

  double temperature = 0.0;

  cpp::UInt   limit = 0;
  double depthCoefficient = 0.5;

  Fields   fields = {};
  Observes observes = {};

  Potentials potentials = {};
  Future     future = {};
  Trajectory trajectory = {};

  RuleNode(Mode _mode, std::vector<RewriteRule>&& _rules, RewriteRule::Unions&& _unions) noexcept;
  RuleNode(Mode _mode, std::vector<RewriteRule>&& _rules, RewriteRule::Unions&& _unions, Fields&& _fields, double _temperature = 0.0) noexcept;
  RuleNode(Mode _mode, std::vector<RewriteRule>&& _rules, RewriteRule::Unions&& _unions, Observes&& _observes, double _temperature = 0.0) noexcept;
  RuleNode(Mode _mode, std::vector<RewriteRule>&& _rules, RewriteRule::Unions&& _unions, Observes&& _observes, cpp::UInt _limit = 0, double _depthCoefficient = 0.5) noexcept;

  auto operator()(const TracedGrid<char>& grid, std::vector<Change<char>>& changes) noexcept -> void;

private:
  std::vector<Match> matches = {};
  using MatchIterator = std::ranges::iterator_t<decltype(matches)>;
  MatchIterator active = std::ranges::begin(matches);
  auto pick(MatchIterator begin, MatchIterator end) noexcept -> MatchIterator;

  std::optional<ioffset> prev = {};
  auto scan(const TracedGrid<char>& grid) noexcept -> void;
  auto select(const Grid<char>& grid) noexcept -> void;
  auto apply(const TracedGrid<char>& grid, std::vector<Change<char>>& changes) -> void;

  std::mt19937 rng = std::mt19937{std::random_device{}()};

  auto predict(const Grid<char>& grid, std::vector<Change<char>>& changes) noexcept -> void;
  auto infer(const Grid<char>& grid) noexcept -> void;
};
