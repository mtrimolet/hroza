export module windowapp;

import std;
import log;
import stormkit.core;
import stormkit.wsi;

import geometry;
import grid;
import model;

import parser;

using namespace stormkit;

export
struct WindowApp {
public:
  static constexpr auto WINDOW_TITLE = "Hroza";
  static constexpr auto WINDOW_SIZE  = math::ExtentU{800u, 600u};

  static constexpr auto DEFAULT_PALETTE_FILE = "resources/palette.xml";
  static constexpr auto DEFAULT_MODEL_FILE   = "models/GoToGradient.xml";

  // static constexpr auto DEFAULT_GRID_EXTENT = math::ExtentU{1u, 33u, 33u};

  auto run(std::span<const std::string_view> args) noexcept -> int;

private:
  wsi::Window       window;
  wsi::EventHandler event_handler;

  std::unordered_map<char, unsigned int> color_offsets;

  TracedGrid<char>      grid;
  parser::ColorPalette    palette;
  Model      model;

  inline constexpr auto init_window() noexcept -> decltype(auto) {
    ilog("create window");
    window.create(WINDOW_TITLE, WINDOW_SIZE, wsi::WindowStyle::ALL);
  }

  inline constexpr auto init_event_handler() noexcept -> decltype(auto) {
    ilog("set event callbacks");
    event_handler.set_callbacks({
      { wsi::EventType::CLOSED, [&](const wsi::Event&) { window.close(); }}
    });
  }

  inline constexpr auto load_palette(const std::filesystem::path& palettefile) noexcept -> decltype(auto) {
    ilog("loading palette {}", palettefile.string());
    palette = parser::Palette(parser::document(palettefile));
  }

  inline constexpr auto load_model(const std::filesystem::path& modelfile) noexcept -> decltype(auto) {
    ilog("loading model {}", modelfile.string());
    model = parser::Model(parser::document(modelfile));

    // window.setpalette(model.symbols
    //   | std::views::transform([this](auto&& s) noexcept {
    //       return palette.contains(s) 
    //         ? palette.at(s) 
    //         : 0xffffff;
    //   })
    //   | std::ranges::to<std::vector>()
    // );

    // color_offsets = std::views::zip(model.symbols, std::views::iota(0u))
    //   | std::ranges::to<std::unordered_map<char, unsigned int>>();
  }

  inline constexpr auto init_grid(auto&& extents) noexcept -> decltype(auto) {
    grid = TracedGrid{extents, model.symbols[0]};
    if (model.origin) grid[grid.area().center()] = model.symbols[1];
  }

  // inline constexpr auto update_cell(auto&& change_data) noexcept -> decltype(auto) {
  //   auto&& [u, value] = change_data;
  //   if (window.hascolors()) {
  //     auto&& offset = color_offsets.contains(value) ? color_offsets.at(value) : 0;
  //     window.addch(u.y, u.x, value, offset);
  //   } else {
  //     window.addch(u.y, u.x, value);
  //   }
  // }
};
