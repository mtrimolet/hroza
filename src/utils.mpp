export module utils;

import std;
import ranges;
import glm;
import stormkit.Core;

using namespace stormkit;

export {

template <class R, class T>
concept container_compatible_range = 
  std::ranges::input_range<R>
  and std::convertible_to<std::ranges::range_reference_t<R>, T>;

// from: https://stackoverflow.com/a/13370695
template <typename ReturnType, typename... Args>
std::function<ReturnType (Args...)> memoize(std::function<ReturnType (Args...)> func) {
  std::unordered_map<std::tuple<Args...>, ReturnType> cache;
  return ([=](Args... args) mutable {
          std::tuple<Args...> t(args...);
          if (cache.find(t) == cache.end())
             cache[t] = func(args...);
          return cache[t];
  });
}

template <class T>
struct std::hash<std::unordered_set<T>> {
  inline constexpr auto operator()(const std::unordered_set<T>& set) const noexcept -> std::size_t {
    auto seed = std::hash<std::size_t>{}(set.size());
    for (auto i : set) {
      seed ^= std::hash<T>{}(i);
    }
    return seed;
  }
};

template <class T>
struct std::hash<std::vector<T>> {
  inline constexpr auto operator()(const std::vector<T>& vec) const noexcept -> std::size_t {
    auto seed = std::hash<std::size_t>{}(vec.size());
    for (auto i : vec) {
      seed ^= std::hash<T>{}(i);
    }
    return seed;
  }
};

// template <class... T>
// struct std::hash<std::tuple<T...>> {
//   inline constexpr auto operator()(const std::tuple<T...>& tuple) const noexcept -> std::size_t {
//     return (std::hash<std::size_t>{}(std::tuple_size_v<std::tuple<T...>>) 
//          ^ ...
//          ^ std::hash<T>{}(tuple));
//   }
// };

template <>
struct std::hash<math::Vector3U> {
  inline constexpr auto operator()(math::Vector3U u) const noexcept -> std::size_t {
    return std::hash<UInt>{}(u.x)
         ^ std::hash<UInt>{}(u.y)
         ^ std::hash<UInt>{}(u.z);
  }
};

template <>
struct std::hash<std::dims<3>> {
  inline constexpr auto operator()(std::dims<3> u) const noexcept -> std::size_t {
    return std::hash<UInt>{}(u.extent(0))
         ^ std::hash<UInt>{}(u.extent(1))
         ^ std::hash<UInt>{}(u.extent(2));
  }
};

template <std::ranges::sized_range A, std::ranges::sized_range B>
inline constexpr auto cartesian_product(A&& a, B&& b) noexcept -> decltype(auto) {
  return std::forward<A>(a) 
    | std::views::transform([&b] (const auto& i) noexcept {
        return std::forward<B>(b)
          | std::views::transform([&i] (const auto& j) noexcept { return std::make_pair(i, j); })
          | std::ranges::to<std::vector>();
    }) 
  | std::views::join
  | std::ranges::to<std::vector>();
}

template <std::ranges::sized_range A>
inline constexpr auto chunk(A&& a, RangeExtent extent) noexcept -> decltype(auto) {
  return std::views::iota(0u, std::ranges::size(a))
    | std::views::stride(extent)
    | std::views::transform([&a, extent](auto i) noexcept {
        return std::ranges::subrange(
          std::ranges::begin(a) + i,
          std::ranges::begin(a) + i + extent,
        );
    });
}

inline constexpr auto dot(const math::Vector3U& a, const math::Vector3U& b) noexcept -> decltype(auto) {
  return a.x * b.x
       + a.y * b.y
       + a.z * b.z;
}

inline constexpr auto mod(const math::Vector3U& a, const math::Vector3U& b) noexcept -> decltype(auto) {
  return math::Vector3U{
    a.x % b.x,
    a.y % b.y,
    a.z % b.z,
  };
}

inline constexpr auto mod(const math::Vector3U& a, UInt b) noexcept -> decltype(auto) {
  return math::Vector3U{
    a.x % b,
    a.y % b,
    a.z % b,
  };
}

inline constexpr auto div(const math::Vector3U& a, const math::Vector3U& b) noexcept -> decltype(auto) {
  return math::Vector3U{
    a.x / b.x,
    a.y / b.y,
    a.z / b.z,
  };
}

inline constexpr auto div(const math::Vector3U& a, UInt b) noexcept -> decltype(auto) {
  return math::Vector3U{
    a.x / b,
    a.y / b,
    a.z / b,
  };
}

inline constexpr auto allLessThan(const math::Vector3U& a, const math::Vector3U& b) noexcept -> decltype(auto) {
  return math::all(math::lessThan(a, b));
}

template <>
struct std::equal_to<math::Vector3U> {
  inline constexpr auto operator()(const math::Vector3U& a, const math::Vector3U& b) noexcept -> bool {
    return math::all(math::equal(a, b));
  }
};
}