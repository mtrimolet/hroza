export module utils;

import std;
import ranges;
import stormkit.core;

using namespace stormkit;

export {

template <class R, class T>
concept container_compatible_range = 
  std::ranges::input_range<R>
  and std::convertible_to<std::ranges::range_reference_t<R>, T>;

template <class... T>
struct Visitor : T... { using T::operator()...; };

// from: https://stackoverflow.com/a/13370695
template <typename ReturnType, typename... Args>
std::function<ReturnType (Args...)> memoize(std::function<ReturnType (Args...)> func) {
  std::unordered_map<std::tuple<Args...>, ReturnType> cache;
  return ([=](Args... args) mutable {
          std::tuple<Args...> t(args...);
          if (cache.find(t) == cache.end())
             cache[t] = func(args...);
          return cache[t];
  });
}

template <meta::IsArithmetic T>
inline constexpr auto fromBase(std::string_view x, UInt8 base) noexcept -> T {
  auto&& out = T{};
  auto&& result =
      std::from_chars(std::ranges::cbegin(x), std::ranges::cend(x), out, base);
  ensures(result.ec == std::errc{},
          std::format("cannot parse integer base {} from '{}': {}", base, x,
                      std::make_error_code(result.ec).message()));
  return out;
}

template <std::ranges::sized_range A, std::ranges::sized_range B>
inline constexpr auto cartesian_product(A&& a, B&& b) noexcept -> decltype(auto) {
  return std::forward<A>(a) 
    | std::views::transform([&b] (auto&& i) noexcept {
        return std::forward<B>(b)
          | std::views::transform([&i] (auto&& j) noexcept { return std::make_pair(i, j); })
          | std::ranges::to<std::vector>();
    }) 
  | std::views::join
  | std::ranges::to<std::vector>();
}

template <std::ranges::sized_range A>
inline constexpr auto chunk(A&& a, RangeExtent extent) noexcept -> decltype(auto) {
  return std::views::iota(0u, std::ranges::size(a))
    | std::views::stride(extent)
    | std::views::transform([&a, extent](auto i) noexcept {
        return std::ranges::subrange(
          std::ranges::begin(a) + i,
          std::ranges::begin(a) + i + extent
        );
    });
}

}
