module;
#include <stormkit/Core/AsCastsMacro.hpp>
export module utils;

import std;
import stormkit.Core;

using namespace stormkit;

export {
  template <meta::IsArithmetic T> auto center(std::array<T, 3> M) -> T {
    const auto &[MZ, MY, MX] = M;
    return MX / 2 + (MY / 2) * MX + (MZ / 2) * MX * MY;
  }

  template <meta::IsArithmetic T> auto center(T MZ, T MY, T MX) -> T {
    return center({std::forward(MZ), std::forward(MY), std::forward(MX)});
  }

  template <meta::IsArithmetic T>
  auto fromBase(std::string_view x, Int8 base) -> T {
    auto out = T{};
    const auto result =
        std::from_chars(std::ranges::cbegin(x), std::ranges::cend(x), out, base);
    ensures(result.ec == std::errc{},
            std::format("cannot parse integer base {} from '{}': {}", base, x,
                        std::make_error_code(result.ec).message()));
    return out;
  }

  template <typename T, RangeExtent N, typename F>
  constexpr auto iotaArray(F && func) -> decltype(auto);
}

template <typename T, RangeExtent N, typename F, RangeExtent... I>
constexpr auto iota_array_impl(F &&func, std::index_sequence<I...>) {
  return std::array<T, N>{{func(I)...}};
}

template <typename T, RangeExtent N, typename F>
constexpr auto iotaArray(F &&func) -> decltype(auto) {
  return iota_array_impl<T, N>(std::forward<F>(func),
                               std::make_index_sequence<N>{});
}
