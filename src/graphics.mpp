export module graphics;

import std;
import glm;
import stormkit.Core;
import ncurses;
import grid;
import model;
import utils;
import ranges;

using namespace stormkit;

export
inline constexpr auto render(const Grid &grid, const Model &model) noexcept -> decltype(auto) {
  // const auto width = /*model.gui +*/ grid.MX * model.pixelsize,
  //            height = grid.MY * model.pixelsize;
  auto bitmap = grid.states
      // | std::views::transform([&model, &grid](auto s) constexpr { return model.palette.at(grid.symbols.at(s)); })
      | std::views::transform([&model, &grid](auto s) constexpr { return grid.symbols.at(s); });
      // | std::ranges::to<std::vector>();

  return std::make_tuple(bitmap, grid.size);
}

export
inline constexpr auto draw(auto&& bitmap, auto&& size) noexcept -> decltype(auto) {
  std::ranges::for_each(bitmap | std::views::chunk(std::get<2>(size)), [](auto&& line) constexpr {
    std::ranges::for_each(line, [](auto&& c) constexpr {
      std::print("{} ", c);
    });
    std::println();
  });
  std::println();
}

// export
// inline constexpr auto draw(auto&& bitmap, auto&& size) noexcept -> decltype(auto) {
//   return draw(
//     bitmap
//       | std::views::transform([](auto x) constexpr { return std::format("{:x}", x); })
//       | std::views::join,
//     size);
// }

export
inline constexpr auto draw(ncurses::window& w, std::span<const Grid::State> bitmap, 
    const std::vector<math::Vector3I>& changes, auto&& size) noexcept -> decltype(auto) {
  // auto w = ncurses::window{height, width};
  for (const auto& [ch, u] : changes | std::views::transform([&](const auto& u){
      return std::make_pair(bitmap.at(toIndex(u, size)), u); })) {
    w.addch(u.y, u.x, ' ', ch);
  }
}