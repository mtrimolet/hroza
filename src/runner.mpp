export module runner;

import std;
import stormkit.core;
import utils;

import grid;

using namespace stormkit;

export {

struct RuleRunner {
  using RuleNode = std::function<std::vector<Change<char>>(TracedGrid<char>&)>;
  RuleNode rulenode;
  cpp::UInt steps;
  cpp::UInt step = 0;

  auto operator()(TracedGrid<char>& grid) noexcept -> std::generator<bool>;
};

using NodeRunner = std::function<std::generator<bool>(TracedGrid<char>&)>;

struct TreeRunner {
  enum struct Mode { MARKOV, SEQUENCE };
  Mode mode;

  std::vector<NodeRunner> nodes;
  decltype(std::ranges::begin(nodes)) current_node = std::ranges::end(nodes);

  inline constexpr TreeRunner(Mode _mode, std::vector<NodeRunner>&& _nodes) noexcept 
  :  mode{_mode}, nodes{std::move(_nodes)}
  {}

  inline constexpr auto current_index() const noexcept -> ioffset {
    return std::ranges::distance(std::ranges::begin(nodes), current_node);
  }

  auto operator()(TracedGrid<char>& grid) noexcept -> std::generator<bool>;
};

}
