export module rewriterule;

import std;
import stormkit.core;
import geometry;

import grid;

using namespace stormkit;

export 
struct RewriteRule {
  using Unions = std::unordered_map<char, std::string>;
  using Union  = Unions::node_type;

  Grid<char> input;
  Grid<char> output;

  double p = 1.0;

  // inline constexpr RewriteRule(
  //   Grid<std::optional<Union>>&& _input,
  //   Grid<std::optional<char>>&&  _output,
  //   double _p = 1.0
  // )
  // : input{std::move(_input)},
  //   output{std::move(_output)},
  //   p{_p}
  // {}

  static auto symmetries(const RewriteRule& rule, std::string_view subgroup = "") noexcept -> std::unordered_set<RewriteRule>;

  inline constexpr auto operator==(const RewriteRule& other) const noexcept -> bool = default;

  static inline constexpr auto parse(
    std::string_view input,
    std::string_view output,
    double p = 1.0
  ) noexcept -> decltype(auto) {
    return RewriteRule{
      Grid<char>::parse(input),
      Grid<char>::parse(output),
      p
    };
  }

  inline constexpr auto xreflected() const noexcept -> decltype(auto) {
    return RewriteRule{
      input.xreflected(),
      output.xreflected(),
      p,
    };
  }

  inline constexpr auto xyrotated() const noexcept -> decltype(auto) {
    return RewriteRule{
      input.xyrotated(),
      output.xyrotated(),
      p,
    };
  }

  inline constexpr auto zyrotated() const noexcept -> decltype(auto) {
    return RewriteRule{
      input.zyrotated(),
      output.zyrotated(),
      p,
    };
  }

  inline constexpr auto area() const noexcept -> decltype(auto) {
    return output.area();
  }

  /** Provides the relative area that this rule would update */
  inline constexpr auto forward_neighborhood() const noexcept -> decltype(auto) {
    return static_cast<Area3I>(area());
  }

  /** Provides the relative area from inside which this rule would update the origin */
  inline constexpr auto backward_neighborhood() const noexcept -> decltype(auto) {
    auto&& a = forward_neighborhood();
    auto&& shift = math::Vector3I{1, 1, 1} - static_cast<math::Vector3I>(a.size);
    return a + shift;
  }
};

template <>
struct std::hash<std::dims<3, std::size_t>> {
  inline constexpr auto operator()(std::dims<3, std::size_t> u) const noexcept -> std::size_t {
    return std::hash<std::dims<3>::index_type>{}(u.extent(0))
         ^ std::hash<std::dims<3>::index_type>{}(u.extent(1))
         ^ std::hash<std::dims<3>::index_type>{}(u.extent(2));
  }
};

template <class T>
struct std::hash<std::unordered_set<T>> {
  inline constexpr auto operator()(const std::unordered_set<T>& set) const noexcept -> std::size_t {
    auto&& seed = std::hash<std::size_t>{}(set.size());
    for (auto&& i : set) {
      seed ^= std::hash<T>{}(i);
    }
    return seed;
  }
};

export template <>
struct std::hash<RewriteRule> {
  inline constexpr auto operator()(const RewriteRule& rule) const noexcept -> std::size_t {
    auto&& seed = std::hash<std::dims<3>>{}(rule.input.extents);
    for (auto&& v : rule.input) {
      seed ^= std::hash<std::remove_cvref_t<decltype(v)>>{}(v);
    }
    for (auto&& v : rule.output) {
      seed ^= std::hash<std::remove_cvref_t<decltype(v)>>{}(v);
    }
    return seed;
  }
};
