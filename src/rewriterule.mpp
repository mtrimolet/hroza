export module rewriterule;

import std;
import glm;
import stormkit.core;
import geometry;

import grid;

using namespace stormkit;

export 
struct RewriteRule {
  using Unions = std::unordered_map<char, std::string>;
  using Union  = Unions::node_type;

  Grid<char> input;
  Grid<char> output;

  std::bernoulli_distribution draw = std::bernoulli_distribution{1.0};
  bool original;

  using Shifts = std::unordered_multimap<char, math::Vector3U>;
  Shifts ishifts;

  RewriteRule() = delete;
  RewriteRule(Grid<char>&& input, Grid<char>&& output, double p = 1.0, bool original = true) noexcept;

  auto symmetries(std::string_view subgroup = "") const noexcept -> std::vector<RewriteRule>;

  inline constexpr auto operator==(const RewriteRule& other) const noexcept -> bool {
    return input    == other.input
       and output   == other.output
       and draw.p() == other.draw.p();
  };

  static inline constexpr auto parse(
    std::string_view input,
    std::string_view output,
    double p = 1.0
  ) noexcept -> RewriteRule {
    return {
      Grid<char>::parse(input),
      Grid<char>::parse(output),
      p
    };
  }

  inline constexpr auto xreflected() const noexcept -> RewriteRule {
    return RewriteRule{
      input.xreflected(),
      output.xreflected(),
      draw.p(),
      false
    };
  }

  inline constexpr auto xyrotated() const noexcept -> RewriteRule {
    return {
      input.xyrotated(),
      output.xyrotated(),
      draw.p(),
      false
    };
  }

  inline constexpr auto zyrotated() const noexcept -> RewriteRule {
    return {
      input.zyrotated(),
      output.zyrotated(),
      draw.p(),
      false
    };
  }

  inline constexpr auto area() const noexcept -> Area3U {
    return output.area();
  }

  /** Provides the relative area that this rule would update */
  inline constexpr auto forward_neighborhood() const noexcept -> Area3I {
    return area();
  }

  /** Provides the relative area from inside which this rule would update the origin */
  inline constexpr auto backward_neighborhood() const noexcept -> Area3I {
    auto&& a = forward_neighborhood();
    auto&& shift = math::Vector3I{1, 1, 1} - static_cast<math::Vector3I>(a.size);
    return a + shift;
  }
};

export template <>
struct std::formatter<RewriteRule> {
  std::string sep = "â†’";
  template<class ParseContext>
  constexpr ParseContext::iterator parse(ParseContext& ctx)
  {
      auto it = ctx.begin();
      if (it == ctx.end())
          return it;

      // if (*it == '#')
      // {
      //     quoted = true;
      //     ++it;
      // }
      if (it != ctx.end() && *it != '}')
          throw std::format_error("Invalid format args for RewriteRule.");

      return it;
  }

  template<class FmtContext>
  FmtContext::iterator format(const RewriteRule& r, FmtContext& ctx) const
  {
      std::ostringstream out;
      // if (quoted)
      //     out << std::quoted(s);
      // else
          out << std::format("[{}x{}]{}{}{}", r.input.extents.extent(2), r.input.extents.extent(1), r.input, sep, r.output);

      return std::ranges::copy(std::move(out).str(), ctx.out()).out;
  }
};
