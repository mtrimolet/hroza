export module rewriterule;

import std;
import glm;
import frozen;
import stormkit.core;
import utils;
import geometry;

import grid;

using namespace stormkit;

export {

struct RewriteRule {
  using Union = std::unordered_set<char>;

  Grid<std::optional<Union>> input;
  Grid<std::optional<char>>  output;

  double p;

  inline constexpr RewriteRule(
    Grid<std::optional<Union>>&& _input,
    Grid<std::optional<char>>&&  _output,
    double _p = 1.0
  )
    : input{std::move(_input)},
    output{std::move(_output)},
    p{_p}
  {}

  inline constexpr auto operator==(const RewriteRule& other) const noexcept -> bool = default;

  static inline constexpr auto parse(
    std::unordered_map<char, Union> unions,
    std::string_view input,
    std::string_view output,
    double p = 1.0
  ) noexcept -> decltype(auto) {
    static constexpr auto IGNORED = '*';

    return RewriteRule{
      decltype(RewriteRule::input)::parse(input, [&unions](auto&& t) noexcept {
        return t == IGNORED    ? std::nullopt
          : unions.contains(t) ? std::optional{unions.at(t)}
                               : std::optional{Union{t}};
      }),
      decltype(RewriteRule::output)::parse(output, [](auto&& t) static noexcept {
        return t == IGNORED ? std::nullopt
                            : std::optional{t};
      }),
      p
    };
  }

  static inline constexpr auto parse(
    std::string_view input,
    std::string_view output,
    double p = 1.0
  ) noexcept -> decltype(auto) {
    return parse({}, input, output, p);
  }

  inline constexpr auto xreflected() const noexcept -> decltype(auto) {
    return RewriteRule{
      input.xreflected(),
      output.xreflected(),
      p,
    };
  }

  inline constexpr auto xyrotated() const noexcept -> decltype(auto) {
    return RewriteRule{
      input.xyrotated(),
      output.xyrotated(),
      p,
    };
  }

  inline constexpr auto zyrotated() const noexcept -> decltype(auto) {
    return RewriteRule{
      input.zyrotated(),
      output.zyrotated(),
      p,
    };
  }

  inline constexpr auto area() const noexcept -> decltype(auto) {
    return output.area();
  }

  /** Provides the relative area that this rule would update */
  inline constexpr auto forward_neighborhood() const noexcept -> decltype(auto) {
    return static_cast<Area3I>(area());
  }

  /** Provides the relative area from inside which this rule would update the origin */
  inline constexpr auto backward_neighborhood() const noexcept -> decltype(auto) {
    auto&& a = forward_neighborhood();
    auto&& shift = math::Vector3I{1, 1, 1} - static_cast<math::Vector3I>(a.size);
    return a + shift;
  }
};
}

auto&& square_groups = into_array<std::function<RewriteRule(const RewriteRule&)>>(
  [](auto&& rule) static noexcept { return auto{rule}; },
  [](auto&& rule) static noexcept { return rule.xreflected(); },
  [](auto&& rule) static noexcept { return rule.xyrotated(); },
  [](auto&& rule) static noexcept { return rule.xyrotated().xreflected(); },
  [](auto&& rule) static noexcept { return rule.xyrotated().xyrotated(); },
  [](auto&& rule) static noexcept { return rule.xyrotated().xyrotated().xreflected(); },
  [](auto&& rule) static noexcept { return rule.xyrotated().xyrotated().xyrotated(); },
  [](auto&& rule) static noexcept { return rule.xyrotated().xyrotated().xyrotated().xreflected(); }
);

constexpr auto square_subgroups =
  frozen::make_unordered_map<frozen::string, std::array<bool, 8>, 6>({
    {"()",     {true, false, false, false, false, false, false, false}},
    {"(x)",    {true,  true, false, false, false, false, false, false}},
    {"(y)",    {true, false, false, false,  true, false, false, false}},
    {"(x)(y)", {true,  true, false, false,  true,  true, false, false}},
    {"(xy+)",  {true, false,  true, false,  true, false,  true, false}},
    {"(xy)",   {true,  true,  true,  true,  true,  true,  true,  true}}
  });

export {
template <>
struct std::hash<RewriteRule> {
  inline constexpr auto operator()(const RewriteRule& rule) const noexcept -> std::size_t {
    auto&& seed = std::hash<std::dims<3>>{}(rule.input.extents);
    for (auto&& v : rule.input) {
      seed ^= std::hash<std::remove_cvref_t<decltype(v)>>{}(v);
    }
    for (auto&& v : rule.output) {
      seed ^= std::hash<std::remove_cvref_t<decltype(v)>>{}(v);
    }
    return seed;
  }
};

inline constexpr auto symmetries(const RewriteRule& rule, std::string_view subgroup = "") noexcept -> decltype(auto) {
  return std::views::zip(square_groups, square_subgroups.at(std::empty(subgroup) ? "(xy)" : subgroup))
    | std::views::filter(monadic::get<1>())
    | std::views::transform([&rule](auto&& action) noexcept { return std::get<0>(action)(rule); })
    | std::ranges::to<std::unordered_set>();
}
}
