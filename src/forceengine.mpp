export module forceengine;

import std;
import glm;
import stormkit.Core;
import utils;

import grid;
import match;

using namespace stormkit;
using symbol = char;

export
inline constexpr auto propagate(auto&& initial, auto&& unfold) noexcept -> decltype(auto) {
  for (
    auto&& q = std::forward<decltype(initial)>(initial) | std::ranges::to<std::queue>();
    not std::ranges::empty(q);
    q.pop()
  ) q.push_range(unfold(q.front()));
}

export
using Potential = Grid<double>;

export
struct ForceEngine {
  double temperature;
  std::unordered_map<symbol, Potential> potentials;

  /** Sum of differences of potential caused by applying match */
  inline constexpr auto gain(Grid<symbol>::ConstView grid, const Match& match) noexcept -> decltype(auto) {
    return std::ranges::fold_left(
      std::views::zip(
        mdiota(match.area()),
        match.rule.output
      )
      | std::views::filter([&grid](auto&& _o) noexcept {
          auto&& [u, o] = _o;
          // locations where value is preserved, their difference is 0
          return o != std::nullopt and *o != grid[u.z, u.y, u.x];
      })
      | std::views::transform([&grid, &potentials{potentials}] (auto&& _o) noexcept {
          auto&& [u, o] = _o;

          auto&& new_value = *o;
          auto&& old_value = grid[u.z, u.y, u.x];

          auto&&
            new_p = potentials.contains(new_value) ? potentials.at(new_value)[u] : 0.0,
            old_p = potentials.contains(old_value) ? potentials.at(old_value)[u] : 0.0;

          if (std::abs(old_p) == std::numeric_limits<double>::infinity())
            return new_p + 1.0;
          return new_p - old_p;
      }),
      0.0, std::plus{}
    );
  }

  /** Sort by (inverse) heated potential gain in non-descending order */
  inline constexpr auto applyPotentials(Grid<symbol>::ConstView grid, std::span<Match> matches) noexcept -> decltype(auto) {
    static auto rg = std::mt19937{std::random_device{}()};
    if (std::ranges::empty(potentials)) {
      std::ranges::shuffle(matches, rg);
      return;
    }

    auto&& values = std::views::zip(
      matches, matches
        | std::views::transform(bindFront(&ForceEngine::gain, this, grid))
        | std::views::transform([&temperature{temperature}](auto&& g) noexcept {
            static auto prob = std::uniform_real_distribution<>{};
            auto&& u = prob(rg);

            /** Is this Metropolis-Hastings ? Monte-Carlo ?
              * It's definitely not Simulated Annealing since we're not changing the temperature.
              * What's my energy, "potential" ?? -- yes, or more precisely "- potential", remember : E = KE - PE
            **/

            return temperature > 0.0
              ? std::pow(u, std::exp(g / temperature))   // `e^(dE/T)`
              : -g + 0.001 * u;                          // what's this arbitrary function used for the cold configuration ?;
        })
    )
      | std::ranges::to<std::unordered_map<Match, double>>();

    ::sort(matches, {}, [&values](auto&& m) noexcept {
      auto&& v = values.at(m);
      // ensures(v == 0.0 or std::isnormal(v), "anormal score value in dijkstra inference");
      return v;
    });
  }
};