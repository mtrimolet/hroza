export module forceengine;

import std;

import grid;
import match;

export {

inline constexpr auto propagate(auto&& initial, auto&& unfold) noexcept -> decltype(auto) {
  for (
    auto&& q = std::forward<decltype(initial)>(initial) | std::ranges::to<std::queue>();
    not std::ranges::empty(q);
    q.pop()
  ) q.push_range(unfold(q.front()));
}

using Potential  = Grid<double>;
using Potentials = std::unordered_map<char, Potential>;

struct ForceEngine {
  double     temperature;
  Potentials potentials;

  /** Sum of differences of potential caused by applying match */
  auto weight(const Grid<char>& grid, const Match& match) noexcept -> double;

  /** Sort by (inverse) heated potential gain in non-descending order */
  auto sort(const Grid<char>& grid, std::span<Match> matches) noexcept -> void;
};

}
