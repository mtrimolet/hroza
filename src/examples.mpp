export module examples;

import std;
import stormkit.Core;
import utils;

import pugixml;

import rule;
import inference;
import rulenode;
import node;

using namespace stormkit;
using namespace std::literals;
using symbol = char;

export {
namespace examples {
inline constexpr auto parseXmlField(
  const pugi::xml_node& xnode
) noexcept -> decltype(auto) {
  return std::make_pair(
    xnode.attribute("for").as_string()[0],
    DijkstraField::parse(
      xnode.attribute("recompute").as_bool(false),
      xnode.attribute("essential").as_bool(false),
      xnode.attribute("on").as_string(),
      xnode.attribute("from").as_string(),
      xnode.attribute("to").as_string()
    )
  );
}

inline constexpr auto parseXmlFields(
  const pugi::xml_node& xnode
) noexcept -> decltype(auto) {
  return xnode.children("field")
    | std::views::transform(parseXmlField)
    | std::ranges::to<std::unordered_map>();
}

inline constexpr auto parseXmlRule(
  const pugi::xml_node& xnode,
  std::unordered_map<symbol, std::unordered_set<symbol>> unions = {}
) noexcept -> decltype(auto) {
  return Rule::parse(
    unions,
    xnode.attribute("in").as_string(),
    xnode.attribute("out").as_string(),
    xnode.attribute("p").as_double(1.0)
  );
}

inline constexpr auto parseXmlRules(
  const pugi::xml_node& xnode,
  std::unordered_map<symbol, std::unordered_set<symbol>> unions = {},
  std::string_view symmetry = ""
) noexcept -> decltype(auto) {
  auto&& xrules = xnode.children("rule") | std::ranges::to<std::vector>();
  if (std::ranges::empty(xrules)) xrules.push_back(xnode);
  return std::move(xrules)
     | std::views::transform(bindBack(parseXmlRule, unions))
     | std::views::transform(bindBack(symmetries, symmetry))
     | std::views::join
     | std::ranges::to<std::vector>();
}

inline constexpr auto parseXmlRuleNode(
  const pugi::xml_node& xnode,
  std::unordered_map<symbol, std::unordered_set<symbol>> unions = {},
  std::string_view symmetry = ""
) noexcept -> Action {
  auto&& tag = xnode.name();
  if (tag == "one"s) {
    return One{
      xnode.attribute("temperature").as_double(0.0),
      parseXmlFields(xnode),
      parseXmlRules(xnode, unions, symmetry)
    };
  }
  else if (tag == "prl"s) {
    return Prl{
      parseXmlRules(xnode, unions, symmetry)
    };
  }
  else if (tag == "all"s) {
    return All{
      xnode.attribute("temperature").as_double(0.0),
      parseXmlFields(xnode),
      parseXmlRules(xnode, unions, symmetry)
    };
  }

  ensures(false, std::format("unknown tag {}", tag));
  std::unreachable();
}

inline constexpr auto parseXmlNode(
  const pugi::xml_node& xnode,
  std::unordered_map<symbol, std::unordered_set<symbol>> unions = {},
  std::string_view symmetry = ""
) noexcept -> Node {
  symmetry = xnode.attribute("symmetry").as_string(std::data(symmetry));
  unions.insert_range(xnode.children("union") | std::views::transform([](const pugi::xml_node& xnode) static noexcept {
    return std::make_pair(
      xnode.attribute("symbol").as_string()[0],
      std::string{xnode.attribute("values").as_string()} | std::ranges::to<std::unordered_set>()
    );
  }));
  
  auto&& tag = xnode.name();
  if (tag == "sequence"s) {
    return Sequence{
      xnode.children()
        | std::views::filter([](const pugi::xml_node& c) static noexcept { return c.name() != "union"s; })
        | std::views::transform(bindBack(parseXmlNode, unions, symmetry))
        | std::ranges::to<std::vector>()
    };
  }
  else if (tag == "markov"s) {
    return Markov{
      xnode.children()
        | std::views::filter([](const pugi::xml_node& c) static noexcept { return c.name() != "union"s; })
        | std::views::transform(bindBack(parseXmlNode, unions, symmetry))
        | std::ranges::to<std::vector>()
    };
  }
  else if (tag == "one"s
        or tag == "prl"s
        or tag == "all"s) {
    auto&& steps = xnode.attribute("steps").as_uint(0);
    if (steps == 0)
      return NoLimit{parseXmlRuleNode(xnode, unions, symmetry)};
    else
      return Limit{std::move(steps), parseXmlRuleNode(xnode, unions, symmetry)};
  }
  
  ensures(false, std::format("unknown tag {}", tag));
  std::unreachable();
}

struct Example {
  std::string_view title;
  std::string symbols;
  bool origin;
  Node program;
};

inline constexpr auto parseXmlExample(std::string_view title, std::string_view filepath) noexcept -> decltype(auto) {
  auto&& xexample = pugi::xml_document{};
  auto&& result = xexample.load_file(std::data(filepath));
  ensures(result, std::format("Error while parsing xml ({}:{}) : {}", filepath, result.offset, result.description()));
  auto&& xnode = xexample.first_child();

  auto&& symbols = xnode.attribute("values").as_string();
  // ensure no duplicate
  auto&& origin = xnode.attribute("origin").as_bool(false);

  auto&& unions = std::string_view{symbols}
    | std::views::transform([](auto&& c) static noexcept { 
        return std::make_pair(c, std::unordered_set{c});
      })
    | std::ranges::to<std::unordered_map>();

  auto&& program = parseXmlNode(xnode, unions);
  if (xnode.name() != "sequence"s and xnode.name() != "markov"s)
    program = Markov{{program}};

  return Example{
    title,
    std::move(symbols), std::move(origin),
    std::move(program)
  };
}

inline constexpr auto parseXmlPalette(std::string_view filepath) noexcept -> decltype(auto) {
  auto&& xpalette = pugi::xml_document{};
  auto&& result = xpalette.load_file(std::data(filepath));
  ensures(result, std::format("Error while parsing xml ({}:{}) : {}", filepath, result.offset, result.description()));

  return xpalette.child("colors").children("color")
    | std::views::transform([](auto&& xcolor) static noexcept {
        auto&& symbol_str = std::string{xcolor.attribute("symbol").as_string()};
        ensures(!std::ranges::empty(symbol_str),
                std::format("missing '{}' attribute in '{}' node [:{}]", "symbol", "color", xcolor.offset_debug()));
        ensures(std::ranges::size(symbol_str) == 1,
                std::format("only one character allowed for '{}' attribute of 'color' node [:{}]", "symbol", "color", xcolor.offset_debug()));
        
        auto&& value = std::string{xcolor.attribute("value").as_string()};
        ensures(!std::ranges::empty(value),
                std::format("missing '{}' attribute in '{}' node [:{}]", "value", "color", xcolor.offset_debug()));
        
        return std::make_pair(symbol_str[0], (255u << 24u) + fromBase<UInt32>(value, 16));
    })
    | std::ranges::to<std::unordered_map>();
}

}
}