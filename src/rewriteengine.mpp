export module rewriteengine;

import std;
import stormkit.core;

import grid;
import rewriterule;
import match;

import log;

using namespace stormkit;

struct EventTracker {
  std::optional<RangeOffset> prev;

  inline constexpr auto newEvents(std::ranges::input_range auto&& history) noexcept -> decltype(auto) {
    auto&& now = std::ranges::cend(history);
    auto&& since = prev
      .transform(bindFront(std::ranges::next, std::ranges::cbegin(history)))
      .value_or(now);
    prev = std::ranges::size(history);

    return std::ranges::subrange(since, now);
  }
};

export
struct RewriteEngine : EventTracker {
  RewriteRule::Unions unions;
  std::vector<RewriteRule> rules;
  std::vector<Match> matches;

  inline constexpr RewriteEngine(std::vector<RewriteRule>&& _rules) noexcept
  : rules{std::move(_rules)} {}

  inline constexpr RewriteEngine(RewriteRule::Unions&& _unions, std::vector<RewriteRule>&& _rules) noexcept
  : unions{std::move(_unions)}, rules{std::move(_rules)} {}

  auto newMatches(
    const Grid<char>& grid,
    std::span<const Change<char>> changes = {}
  ) const noexcept -> std::vector<Match>;

  inline constexpr auto updateMatches(
    const Grid<char>& grid,
    std::span<const Change<char>> history = {}
  ) noexcept -> decltype(auto) {
    matches.append_range(newMatches(grid, newEvents(history))
      | std::views::filter(bindBack(&Match::match, grid, unions)));
  }
};
