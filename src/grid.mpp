export module grid;

import std;
import glm;
import stormkit.core;
import utils;
import geometry;

using namespace stormkit;

export {

inline constexpr auto fromExtents(std::dims<3> extents) noexcept -> math::Vector3U {
  return {
    extents.extent(2),
    extents.extent(1),
    extents.extent(0),
  };
}

inline constexpr auto toExtents(math::Vector3U size) noexcept -> std::dims<3> {
  return std::dims<3>{
    size.z,
    size.y,
    size.x
  };
}

inline constexpr auto strides(std::dims<3> extents) noexcept -> decltype(auto) {
  return std::make_tuple(extents.extent(2) * extents.extent(1), extents.extent(2), 1u);
}

inline constexpr auto toIndex(math::Vector3U u, std::dims<3> extents) noexcept -> UInt32 {
  auto&& [z, y, x] = strides(extents);
  return geometry::dot(u, {x, y, z});
}

inline constexpr auto fromIndex(UInt32 i, std::dims<3> extents) noexcept -> math::Vector3U {
  auto&& [z, y, x] = strides(extents);
  return math::Vector3U{i / x, i / y, i / z} % fromExtents(extents);
}

inline constexpr auto next(math::Vector3U u, std::dims<3> extents) noexcept -> math::Vector3U {
  return fromIndex(toIndex(u, extents) + 1, extents);
}

inline constexpr auto prev(math::Vector3U u, const std::dims<3>& extents) noexcept -> math::Vector3U {
  return fromIndex(toIndex(u, extents) - 1, extents);
}

template <meta::IsArithmetic T>
inline constexpr auto mdiota(HyperRectangle<3, T> zone) noexcept -> decltype(auto) {
  return std::views::iota(static_cast<T>(0), static_cast<T>(zone.size.z * zone.size.y * zone.size.x))
    | std::views::transform(std::bind_back(fromIndex, toExtents(zone.size)))
    | std::views::transform(std::bind_back(std::plus<math::Vector<3, T>>{}, zone.u));
}

template <meta::IsArithmetic T>
inline constexpr auto mdiota(math::Vector<3, T> origin, math::Vector<3, T> outerbound) noexcept -> decltype(auto) {
  return mdiota<T>({origin, outerbound - origin});
}

inline constexpr auto mdiota(std::dims<3> extents) noexcept -> decltype(auto) {
  return mdiota({}, fromExtents(extents));
}

template <class T>
struct Grid {
  using Extents = std::dims<3>;

  Extents extents;
  std::vector<T> values;

  template<container_compatible_range<T> R>
  inline constexpr Grid(std::from_range_t, R&& _values, Extents _extents) noexcept 
  : extents{_extents}, values{std::from_range, _values}
  {}

  inline constexpr Grid(Extents _extents, T v) noexcept
  : Grid{std::from_range, std::views::repeat(v, _extents.extent(0) * _extents.extent(1) * _extents.extent(2)), _extents}
  {}

  inline constexpr Grid() noexcept
  : extents{}, values{}
  {}

  inline constexpr auto operator==(const Grid<T>& other) const noexcept -> bool = default;

  inline constexpr auto data() const noexcept -> decltype(auto) {
    return std::ranges::data(values);
  }
  inline constexpr auto cdata() const noexcept -> decltype(auto) {
    return std::ranges::cdata(values);
  }

  using View = std::mdspan<T, Extents>;
  inline constexpr operator View() const noexcept {
    return {data(), extents};
  }
  using ConstView = std::mdspan<const T, Extents>;
  inline constexpr operator ConstView() const noexcept {
    return {cdata(), extents};
  }

  inline constexpr T& operator[](math::Vector3U u) noexcept {
    return values[toIndex(u, extents)];
  }

  inline constexpr const T& operator[](math::Vector3U u) const noexcept {
    return values[toIndex(u, extents)];
  }

  inline constexpr T& at(math::Vector3U u) {
    return values.at(toIndex(u, extents));
  }

  inline constexpr const T& at(math::Vector3U u) const {
    return values.at(toIndex(u, extents));
  }

  inline constexpr auto begin() const noexcept -> decltype(auto) {
    return std::ranges::begin(values);
  }
  inline constexpr auto cbegin() const noexcept -> decltype(auto) {
    return std::ranges::cbegin(values);
  }

  inline constexpr auto end() const noexcept -> decltype(auto) {
    return std::ranges::end(values);
  }
  inline constexpr auto cend() const noexcept -> decltype(auto) {
    return std::ranges::cend(values);
  }

  inline constexpr auto empty() const noexcept -> decltype(auto) {
    return std::ranges::empty(values);
  }

  static inline constexpr auto parse(std::string_view str, std::function<T(char)> project = std::identity{}) noexcept -> decltype(auto) {
    static constexpr char ZSEP = ' ', YSEP = '/';

    auto&& values = str
      | std::views::split(ZSEP)
      | std::views::transform([&project](auto&& square){ 
          return square
            | std::views::split(YSEP)
            | std::views::transform([&project](auto&& line){
                return line
                  | std::views::transform(project)
                  | std::ranges::to<std::vector>();
              })
            | std::ranges::to<std::vector>(); 
        })
      | std::ranges::to<std::vector>();

    auto&& extents = std::dims<3>{
      std::ranges::size(values),
      std::ranges::empty(values) ? 0u
        : std::ranges::size(values[0]),
      std::ranges::empty(values) or std::ranges::empty(values[0]) ? 0u
        : std::ranges::size(values[0][0]),
    };

    return std::move(values)
      | std::views::join
      | std::views::join
      | std::ranges::to<Grid<T>>(std::move(extents));
  }

  inline constexpr auto area() const noexcept -> Area3U {
    return {{}, fromExtents(extents)};
  }

  inline constexpr auto xreflected() const noexcept -> Grid<T> {
    auto area = ::xreflected(this->area());
    return mdiota(area)
      | std::views::transform([this, size = area.size](auto&& u) noexcept {
          return this->at({ size.x - u.x - 1u, u.y, u.z });
      })
      // | std::views::transform(std::bind_front(&Grid<T>::at, this))
      | std::ranges::to<Grid<T>>(toExtents(area.size));
  }

  inline constexpr auto xyrotated() const noexcept -> Grid<T> {
    auto area = ::xyrotated(this->area());
    return mdiota(area)
      | std::views::transform([this, size = area.size](auto&& u) noexcept {
          return this->at({ u.y, size.x - u.x - 1u, u.z });
      })
      // | std::views::transform(std::bind_front(&Grid<T>::at, this))
      | std::ranges::to<Grid<T>>(toExtents(area.size));
  }

  inline constexpr auto zyrotated() const noexcept -> Grid<T> {
    auto area = ::zyrotated(this->area());
    return mdiota(area)
      | std::views::transform([this, size = area.size](auto&& u) noexcept {
          return this->at({ u.x, size.z - u.z - 1u, u.y });
      })
      // | std::views::transform(std::bind_front(&Grid<T>::at, this))
      | std::ranges::to<Grid<T>>(toExtents(area.size));
  }
};

template <class T>
struct std::formatter<Grid<T>> {
  template<class ParseContext>
  constexpr ParseContext::iterator parse(ParseContext& ctx)
  {
      auto it = ctx.begin();
      if (it == ctx.end())
          return it;

      // if (*it == '#')
      // {
      //     quoted = true;
      //     ++it;
      // }
      if (it != ctx.end() && *it != '}')
          throw std::format_error("Invalid format args for Grid.");

      return it;
  }

  template<class FmtContext>
  FmtContext::iterator format(const Grid<T>& g, FmtContext& ctx) const
  {
      std::ostringstream out;
      // if (quoted)
      //     out << std::quoted(s);
      // else
          out << std::format("{}", g.values);

      return std::ranges::copy(std::move(out).str(), ctx.out()).out;
  }
};

template <class T>
struct Change {
  math::Vector3U u;
  T value;
};

template <class T>
struct std::formatter<Change<T>> {
  template<class ParseContext>
  constexpr ParseContext::iterator parse(ParseContext& ctx)
  {
      auto it = ctx.begin();
      if (it == ctx.end())
          return it;

      // if (*it == '#')
      // {
      //     quoted = true;
      //     ++it;
      // }
      if (it != ctx.end() && *it != '}')
          throw std::format_error("Invalid format args for Grid.");

      return it;
  }

  template<class FmtContext>
  FmtContext::iterator format(const Change<T>& c, FmtContext& ctx) const
  {
      std::ostringstream out;
      // if (quoted)
      //     out << std::quoted(s);
      // else
          out << std::format("change[u = {}, value = {}] ", c.u, c.value);

      return std::ranges::copy(std::move(out).str(), ctx.out()).out;
  }
};

template <class T>
struct TracedGrid : Grid<T> {
  std::vector<Change<T>> history;

  inline constexpr TracedGrid() noexcept
    : Grid<T>{}, history{} {}

  inline constexpr TracedGrid(Grid<T>::Extents _extents, T v) noexcept
    : Grid<T>{_extents, v}, history{} {}

  inline constexpr auto apply(Change<T> change) noexcept -> void {
    history.push_back(change);
    Grid<T>::operator[](change.u) = change.value;
  }
};
}
