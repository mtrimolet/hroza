export module grid;

import std;
import glm;
import stormkit.Core;
import utils;

using namespace stormkit;

export {

inline constexpr auto toSentinel(const std::dims<3>& extents) noexcept -> decltype(auto) {
  return math::Vector3U{
    extents.extent(2),
    extents.extent(1),
    extents.extent(0),
  };
}

inline constexpr auto fromSentinel(math::Vector3U sentinel) noexcept -> decltype(auto) {
  return std::dims<3>{
    sentinel.z,
    sentinel.y,
    sentinel.x,
  };
}

// inline constexpr auto toIndex(const math::Vector3U& u, const math::Vector3U& extents) noexcept -> decltype(auto) {
//   return u.x * 1
//        + u.y * extents.x
//        + u.z * extents.x * extents.y;
// }

inline constexpr auto toIndex(math::Vector3U u, const std::dims<3>& extents) noexcept -> decltype(auto) {
  return dot(u, {1u, extents.extent(2), extents.extent(2) * extents.extent(1)});
}

// inline constexpr auto fromIndex(UInt u, const math::Vector3U& extents) noexcept -> decltype(auto) {
//   return math::Vector3U{
//     (u / (1)) % extents.x,
//     (u / (extents.x)) % extents.y,
//     (u / (extents.x * extents.y)) % extents.z,
//   };
// }

inline constexpr auto fromIndex(UInt u, const std::dims<3>& extents) noexcept -> decltype(auto) {
  return mod(
    div({u, u, u}, { 1u, extents.extent(2), extents.extent(2) * extents.extent(1)}),
    toSentinel(extents)
  );
}

// inline constexpr auto mdiota(const math::Vector3U& extents) noexcept -> decltype(auto) {
//   return std::views::iota(0u, extents.z * extents.y * extents.x)
//     | std::views::transform(bindBack(fromIndex, extents));
// }

inline constexpr auto mdiota(math::Vector3U initial, math::Vector3U sentinel) noexcept -> decltype(auto) {
  const auto extents = fromSentinel(sentinel);
  return std::views::iota(toIndex(initial, extents), sentinel.z * sentinel.y * sentinel.x)
    | std::views::transform(bindBack(fromIndex, extents));
}

inline constexpr auto mdiota(math::Vector3U sentinel) noexcept -> decltype(auto) {
  return mdiota({0u, 0u, 0u}, sentinel);
}

template <class T>
struct Grid {
  using Extents = std::dims<3>;

  Extents extents;
  std::vector<T> values;

  template<container_compatible_range<T> R>
  Grid(std::from_range_t, R&& _values, Extents _extents) noexcept : extents{_extents}, values{std::from_range, _values} {}
  Grid(Extents _extents, T v) noexcept : Grid{std::from_range, std::views::repeat(v, _extents.extent(0) * _extents.extent(1) * _extents.extent(2)), _extents} {}

  inline constexpr auto operator==(const Grid<T>& other) const noexcept -> bool = default;

  inline constexpr auto data() const noexcept -> decltype(auto) {
    return std::ranges::data(values);
  }
  inline constexpr auto cdata() const noexcept -> decltype(auto) {
    return std::ranges::cdata(values);
  }

  inline constexpr auto at(const math::Vector3U& u) const noexcept -> decltype(auto) {
    return values.at(toIndex(u, extents));
  }

  inline constexpr auto operator[](const math::Vector3U& u) noexcept -> decltype(auto) {
    return values[toIndex(u, extents)];
  }

  inline constexpr auto begin() const noexcept -> decltype(auto) {
    return std::ranges::begin(values);
  }
  inline constexpr auto cbegin() const noexcept -> decltype(auto) {
    return std::ranges::cbegin(values);
  }

  inline constexpr auto end() const noexcept -> decltype(auto) {
    return std::ranges::end(values);
  }
  inline constexpr auto cend() const noexcept -> decltype(auto) {
    return std::ranges::cend(values);
  }

  static inline constexpr auto parse(T Zsep, T Ysep, std::basic_string_view<T> str) noexcept -> decltype(auto) {
    auto values = str
      | std::views::split(Zsep)
      | std::views::transform([Ysep](auto&& square){ 
          return square
            | std::views::split(Ysep)
            | std::views::transform([](auto&& line){
                return line
                  | std::ranges::to<std::vector>();
              })
            | std::ranges::to<std::vector>(); 
        })
      | std::ranges::to<std::vector>();

    auto extents = std::dims<3>{
      std::ranges::size(values),
      std::ranges::empty(values) ? 0u
        : std::ranges::size(values[0]),
      std::ranges::empty(values) or std::ranges::empty(values[0]) ? 0u
        : std::ranges::size(values[0][0]),
    };

    return values
      | std::views::join
      | std::views::join
      | std::ranges::to<Grid<T>>(extents);
  }
};

template <class T>
inline constexpr auto xreflected(const Grid<T>& grid) noexcept -> decltype(auto) {
  auto extents = auto{grid.extents};
  const auto sent = toSentinel(extents);
  return mdiota(sent)
    | std::views::transform([&sent, &grid](auto u) noexcept {
        return grid.at({ sent.x - u.x - 1u, u.y, u.z });
    })
    | std::ranges::to<Grid<T>>(extents);
}

template <class T>
inline constexpr auto xyrotated(const Grid<T>& grid) noexcept -> decltype(auto) {
  auto extents = std::dims<3>{
    grid.extents.extent(0),
    grid.extents.extent(2),
    grid.extents.extent(1),
  };
  const auto sent = toSentinel(extents);
  return mdiota(sent)
    | std::views::transform([&sent, &grid](auto u) noexcept {
        return grid.at({ u.y, sent.x - u.x - 1, u.z });
    })
    | std::ranges::to<Grid<T>>(extents);
}

template <class T>
inline constexpr auto zyrotated(const Grid<T>& grid) noexcept -> decltype(auto) {
  auto extents = std::dims<3>{
    grid.extents.extent(1),
    grid.extents.extent(0),
    grid.extents.extent(2),
  };
  const auto sent = toSentinel(extents);
  return mdiota(sent)
    | std::views::transform([&sent, &grid](auto u) noexcept {
        return grid.at({ u.x, sent.z - u.z - 1, u.y });
    })
    | std::ranges::to<Grid<T>>(extents);
}

template <class T>
struct Change {
  math::Vector3U u;
  T value;
};

template <class T>
struct TracedGrid : Grid<T> {
  std::vector<Change<T>> history;

  TracedGrid(Grid<T>::Extents _extents, T v) noexcept
    : Grid<T>{_extents, v}, history{} {}

  inline constexpr auto apply(const Change<T>& change) noexcept -> decltype(auto) {
    history.push_back(change);
    Grid<T>::operator[](change.u) = change.value;
  }
};
}