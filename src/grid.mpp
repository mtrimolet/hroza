export module grid;

import std;
import stormkit.Core;
import pugixml;
import xml_tree_walker;

import rule;
import utils;

using namespace std::literals;
using namespace stormkit;

export struct Grid {
public:
  using State = Int;
  using Symbol = char;

  Int MX, MY, MZ;

  std::vector<State> states;
  std::vector<Boolean> mask;

  std::vector<Symbol> characters;
  HashMap<Symbol, State> values;
  // wave is a State ? really ? not a superposition (aka a distribution over all
  // possible values of a State) ??
  HashMap<Symbol, State> waves;
  std::string_view folder;

  Grid(const pugi::xml_node &xelem, Int _MX, Int _MY, Int _MZ);
  auto clear() noexcept -> void;
  auto wave(std::string_view _values) const noexcept -> Int;

  template <Int IM, Int OM>
  auto matches(Rule<IM, OM> rule, Int x, Int y, Int z) const noexcept -> Boolean;

  auto center() const noexcept -> decltype(auto);

private:
  Int transparent;
  std::vector<State> statesbuffer;
};

Grid::Grid(const pugi::xml_node &xelem, Int _MX, Int _MY, Int _MZ)
    : MX{_MX}, MY{_MY}, MZ{_MZ}, states(MX * MY * MZ),
      statesbuffer(MX * MY * MZ), mask(MX * MY * MZ),
      folder{xelem.attribute("folder").as_string()} {

  const auto symbols = std::string{xelem.attribute("values").as_string()};
  ensures(!std::empty(symbols),
          std::format("no values specified [:{}]", xelem.offset_debug()));

  for (auto [i, symbol] = std::make_tuple(0, symbols[0]);
       i < std::ranges::size(symbols) and symbol != 0; symbol = symbols[++i]) {
    ensures(
        !values.contains(symbol),
        std::format("repeating value {} [:{}]", symbol, xelem.offset_debug()));
    characters.push_back(symbol);
    values.insert({symbol, i});
    waves.insert({symbol, 1 << i});
  }

  waves.insert({'*', (1 << std::ranges::size(characters)) - 1});

  transparent = wave(xelem.attribute("transparent").as_string());

  // constexpr auto is_union = [](auto &&elem) {
  //   return elem.name() == "union"sv;
  // };

  std::println("nodes:");
  for (auto &&xunion : XMLDepthWalker{xelem.root()}) {
    const auto attributes = xunion.attributes()
        | std::views::transform([](auto attr) { return std::format("{}={}", attr.name(), attr.value()); });
    std::println("{}{}", xunion.name(), attributes);

    // auto symbol = xunion.attribute("symbol").as_string()[0]; // !!!!
    // ensures(!waves.contains(symbol), std::format("repeating union {}", symbol));

    // const auto w = wave(xunion.attribute("values").as_string());
    // waves.insert({symbol, w});
  }
  std::println();
}

auto Grid::clear() noexcept -> void {
  for (auto &&component : states) component = 0;
}

auto Grid::wave(std::string_view _values) const noexcept -> Int {
  auto sum = 0;
  for (auto &&value : _values) sum += 1 << values.at(value);
  return sum;
}

template <Int IM, Int OM>
auto Grid::matches(Rule<IM, OM> rule, Int x, Int y, Int z) const noexcept -> Boolean {
  Int dz = 0, dy = 0, dx = 0;
  for (auto rule_input_component : rule.input) {
    if ((rule_input_component &
         // for (Int di = 0; di < rule.input.Length; di++) {
         //   if ((rule.input[di] &
         (1 << states[x + dx + (y + dy) * MX + (z + dz) * MX * MY])) == 0)
      return false;

    dx++;
    if (dx == rule.IMX) {
      dx = 0;
      dy++;
      if (dy == rule.IMY) {
        dy = 0;
        dz++;
      }
    }
  }
  return true;
}

auto Grid::center() const noexcept -> decltype(auto) {
  return ::center(MX, MY, MZ);
}