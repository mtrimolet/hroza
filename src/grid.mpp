export module grid;

import std;
import glm;
import stormkit.Core;
import pugixml;
import xml_tree_walker;
import rule;
import utils;

using namespace std::literals;
using namespace stormkit;

export struct Grid {
public:
  using Symbol = Rule::Symbol;
  // 0 <= {s : State} < size(symbols)
  using State = Rule::State;
  // size({w : Wave}) == size(states)
  using Wave = Rule::Wave;

  Size size;

  // size(states) == size[0] * size[1] * size[2]
  std::vector<State> states;

  std::vector<Symbol> symbols;
  // size(values) == size(symbols)
  std::unordered_map<Symbol, State> values;
  // size(waves) >= size(symbols) + 1
  std::unordered_map<Symbol, Wave> waves;

  std::string_view folder;
  bool origin;

  Grid(auto &&_size, auto&& _symbols, auto folder, auto _transparent, auto origin) noexcept
    : size{_size}, states{}, symbols{_symbols},
      values{std::views::zip(symbols, std::views::iota(as<State>(0)))
        | std::ranges::to<std::unordered_map<Symbol, State>>()},
      waves{symbols
        | std::views::transform([this](auto&& symbol) constexpr {
            return std::make_pair(symbol, wave(std::string{symbol}));
          })
        | std::ranges::to<std::unordered_map>()},
      folder{folder},
      transparent{wave(_transparent)},
      origin{origin} {
    reset();
  }
  
  static inline constexpr auto parse(const pugi::xml_node &xelem, auto&& size) noexcept -> decltype(auto) {
    const auto values = std::string{xelem.attribute("values").as_string()};
    ensures(!std::empty(values), std::format("missing '{}' attribute in '{}' node [:{}]", "values", "grid", xelem.offset_debug()));

    auto symbols = std::vector(std::ranges::begin(values), std::ranges::end(values));
    const auto symbolset = std::set(std::ranges::begin(symbols), std::ranges::end(symbols));
    ensures(std::ranges::size(symbols) == std::ranges::size(symbolset),
            std::format("duplicated symbols in '{}' attribute of '{}' node [:{}]", "values", "grid", xelem.offset_debug()));

    auto grid = Grid{
      size,
      symbols,
      xelem.attribute("folder").as_string(),
      xelem.attribute("transparent").as_string(),
      xelem.attribute("origin").as_bool(false),
    };

    auto any_wave = std::views::repeat(true, std::ranges::size(symbols))
        | std::ranges::to<std::vector>();

    grid.waves.insert({'*', any_wave});

    for (const auto& xunion : XMLDepthWalker{xelem}) {
      if (xunion.name() != "union"sv) continue;

      const auto symbol_str = std::string{xunion.attribute("symbol").as_string()};
      ensures(!std::ranges::empty(symbol_str),
              std::format("missing '{}' attribute in '{}' node [:{}]", "symbol", "union", xunion.offset_debug()));
      ensures(std::ranges::size(symbol_str) == 1,
              std::format("only one character allowed for '{}' attribute of '{}' node [:{}]", "symbol", "union", xunion.offset_debug()));
      
      const auto symbol = symbol_str[0];
      ensures(!grid.waves.contains(symbol),
              std::format("conflicting symbol '{}' in '{}' attribute of '{}' node [:{}]", symbol, "symbol", "union", xunion.offset_debug()));

      const auto w = grid.wave(xunion.attribute("values").as_string());
      grid.waves.insert({symbol, w});
    }

    return grid;
  }

  inline constexpr auto operator[](const math::Vector3I& u) noexcept -> State& {
    return states[toIndex(u, size)];
  }

  inline constexpr auto at(const math::Vector3I& u) const noexcept -> const State& {
    return states.at(toIndex(u, size));
  }

  inline constexpr auto reset() noexcept -> void {
    const auto s = std::get<0>(size) * std::get<1>(size) * std::get<2>(size);

    states.clear();
    states.resize(s);

    // mask.clear();
    // mask.resize(s);

    if (origin) states[toIndex({
      std::get<2>(size) / 2,
      std::get<1>(size) / 2,
      std::get<0>(size) / 2,
    }, size)] = values.at(symbols.at(1));
  }

  inline constexpr auto wave(std::string_view _values) const noexcept -> Wave {
    ensures(!std::ranges::empty(values), "cannot call 'Grid::wave' before Grid initialization");
    return symbols
        | std::views::transform([&_values](auto sym){ return _values.contains(sym); })
        | std::ranges::to<std::vector>();
  }

  inline constexpr auto subvolume(const math::Vector3I& u, const Size& vol_size) const noexcept -> decltype(auto) {
    return ::subvolume(states, size, u, vol_size);
  }

  inline constexpr auto matches(const Rule& rule, const math::Vector3I& u) const noexcept -> bool {
    return std::ranges::all_of(
      std::views::zip(rule.input, subvolume(u, rule.input_size)),
      [](const auto &wav) constexpr {
        const auto& [input_wave, state] = wav;
        return input_wave.at(state);
      }
    );
  }

private:
  Wave transparent;
};
