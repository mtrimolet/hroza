export module grid;

import std;
import glm;
import stormkit.Core;

using namespace stormkit;

export {

inline constexpr auto toIndex(const math::Vector3U& u, const math::Vector3U& size) noexcept -> decltype(auto) {
  return u.x * 1
       + u.y * size.x
       + u.z * size.x * size.y;
}

inline constexpr auto fromIndex(UInt u, const math::Vector3U& size) noexcept -> decltype(auto) {
  return math::Vector3U{
    (u / (1)) % size.x,
    (u / (size.x)) % size.y,
    (u / (size.x * size.y)) % size.z,
  };
}

inline constexpr auto inBounds(const math::Vector3U& u, const math::Vector3U& highest) -> decltype(auto) {
  return u.x <= highest.x
      && u.y <= highest.y
      && u.z <= highest.z;
}

template <class Value = char>
struct Grid {
  math::Vector3U size;
  std::vector<Value> values;

  Grid(std::initializer_list<std::initializer_list<std::initializer_list<Value>>> _values) noexcept
    : size{
        std::empty(_values) or std::empty(std::ranges::begin(_values)[0]) ? 0
          : std::ranges::size(std::ranges::begin(std::ranges::begin(_values)[0])[0]),
        std::empty(_values) ? 0 : std::ranges::size(std::ranges::begin(_values)[0]),
        std::ranges::size(_values)},
    values{_values | std::views::join | std::views::join | std::ranges::to<std::vector>()} {}

  inline constexpr auto operator==(const Grid& other) const noexcept -> bool {
    return size == other.size and values == other.values;
  }
};
}