export module xml_tree_walker;

import std;
import pugixml;
import stormkit.Core;

using namespace stormkit;

export struct XMLDepthWalker {
  struct Iterator {
    pugi::xml_node cur;
    UInt depth;

    Iterator() {}
    Iterator(pugi::xml_node &&_cur)
        : cur{std::move(_cur)}, depth{cur ? 1u : 0u} {}

    auto go_in() -> void {
      ++depth;
      cur = cur.first_child();
    }

    auto can_go_in() const -> bool {
      return static_cast<bool>(cur.first_child());
    }

    auto go_out() -> void {
      --depth;
      cur = cur.parent();
    }

    auto can_go_out() const -> bool {
      return depth > 0 && static_cast<bool>(cur.parent());
    }

    auto next() -> void { cur = cur.next_sibling(); }

    auto can_go_next() const -> bool {
      return static_cast<bool>(cur.next_sibling());
    }

    auto end() -> void { cur = pugi::xml_node{}; }

    auto operator++() -> decltype(auto) {
      if (can_go_in()) {
        go_in();
      } else if (can_go_next()) {
        next();
      } else {
        while (!can_go_next() && can_go_out()) {
          go_out();
        }

        if (can_go_next())
          next();
        else
          end();
      }

      return *this;
    }

    auto operator*() -> decltype(auto) { return cur; }

    auto operator!=(Iterator &other) -> bool { return cur != other.cur; }
  };

  const pugi::xml_node root;
  auto begin() -> decltype(auto) { return Iterator{auto{root}}; }
  auto end() -> decltype(auto) { return Iterator{}; }
};
