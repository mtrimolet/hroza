export module parser;

import std;
import stormkit.core;
import utils;

import pugixml;

import model;

import rewriterule; // <rule>
import rulenode;    // <one>, <prl>, <all>
import fields;      // <field>
import observes;    // <observe>
import runner;      // <sequence>, <markov>

// using namespace stormkit;
// using namespace std::literals;

export {

namespace parser {

auto document(std::span<const std::byte> buffer) noexcept -> pugi::xml_document;
auto document(const std::filesystem::path& filepath) noexcept -> pugi::xml_document;

auto Model(const pugi::xml_document& xmodel) noexcept -> Model;

auto NodeRunner(
  const pugi::xml_node& xnode,
  RewriteRule::Unions unions,
  std::string_view symmetry = ""
) noexcept -> ::NodeRunner;
auto RuleNode(
  const pugi::xml_node& xnode,
  RewriteRule::Unions unions,
  std::string_view symmetry = ""
) noexcept -> ::RuleNode;

auto Rule(const pugi::xml_node& xnode) noexcept -> RewriteRule;
auto Rules(
  const pugi::xml_node& xnode,
  std::string_view symmetry = ""
) noexcept -> std::vector<RewriteRule>;

auto Field(const pugi::xml_node& xnode) noexcept -> std::pair<char, ::Field>;
auto Fields(const pugi::xml_node& xnode) noexcept -> ::Fields;

auto Observe(const pugi::xml_node& xnode) noexcept -> std::pair<char, ::Observe>;
auto Observes(const pugi::xml_node& xnode) noexcept -> ::Observes;

using Color32 = stormkit::u32;
using ColorPalette = std::unordered_map<char, Color32>;

auto Palette(const pugi::xml_document& xpalette) noexcept -> ColorPalette;

}
}
