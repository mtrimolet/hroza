export module sequencenode;

import std;
import stormkit.Core;
import pugixml;

using namespace stormkit;
using namespace std::literals;

export template <class Node>
struct SequenceNode {
  std::vector<Node> children;
  std::vector<Node>::iterator current = std::ranges::begin(children);

  static inline constexpr auto parse(const pugi::xml_node& xseq, const auto& grid, const auto& parentSymmetry) noexcept -> SequenceNode {
    auto children = xseq.children()
      | std::views::filter([](const auto& xnode){ return xnode.name() != "union"sv; })
      | std::views::transform([&grid, &parentSymmetry](const auto& xnode){ return Node::parse(xnode, grid, parentSymmetry); })
      | std::ranges::to<std::vector>();

      return SequenceNode{children};
  }

  inline constexpr auto reset() noexcept -> void {
    for (auto& node : children) node.reset();
    current = std::ranges::begin(children);
  }

  inline auto execute(auto& grid, auto& changes, auto& rg) noexcept -> std::generator<bool> {
    reset();
    while (current != std::ranges::end(children)) {
      for (const auto success : current->execute(grid, changes, rg))
        if (success) co_yield true;
        else { current++; break; }
    }
    co_yield false;
  }
};