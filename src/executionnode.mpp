export module executionnode;

import std;
import stormkit.core;

import log;
import grid;

using namespace stormkit;

export {

using Action = std::function<std::vector<Change<char>>(TracedGrid<char>&)>;

}

struct ActionNodeBase {
  Action action;
  auto operator()(TracedGrid<char>& grid) noexcept -> std::vector<Change<char>>;
};

export {

struct NoLimit : ActionNodeBase {
  auto operator()(TracedGrid<char>& grid) noexcept -> std::generator<std::vector<Change<char>>>;
};

struct Limit : ActionNodeBase {
  UInt count;

  inline constexpr Limit(UInt _count, Action&& _action) noexcept
  : ActionNodeBase{std::move(_action)}, count{_count} {}

  auto operator()(TracedGrid<char>& grid) noexcept -> std::generator<std::vector<Change<char>>>;
};

using ExecutionNode = std::function<std::generator<std::vector<Change<char>>>(TracedGrid<char>&)>;

}

struct ExecutionNodeBase {
  std::vector<ExecutionNode> nodes;
  decltype(std::ranges::begin(nodes)) current_node = std::ranges::begin(nodes);

  inline constexpr auto current_index() const noexcept -> RangeOffset {
    return std::ranges::distance(std::ranges::begin(nodes), current_node);
  }
};

export {

struct Sequence : ExecutionNodeBase {
  auto operator()(TracedGrid<char>& grid) noexcept -> std::generator<std::vector<Change<char>>>;
};

struct Markov : ExecutionNodeBase {
  auto operator()(TracedGrid<char>& grid) noexcept -> std::generator<std::vector<Change<char>>>;
};

}
