export module rulenode;

import std;
import glm;
import stormkit.Core;
import rule;
import grid;
import stride_view;
import utils;

using namespace stormkit;

export struct RuleNode {

public:
  std::vector<Rule> rules;

protected:
  using Match = std::tuple<UInt, math::Vector3I>;
  std::vector<Match> matches;

  // std::optional<UInt> lastMatchedTurn;
  // size(matchMask) == size(rules);
  // size(matchMask[i]) == grid_size[0] * grid_size[1] * grid_size[2];
  std::vector<std::vector<bool>> matchMask;

  // size(last) == size(rules)
  // std::vector<bool> last;

public:
  RuleNode(auto&& grid_size, auto&& _rules, auto&& steps) noexcept
      : rules{_rules}, matchMask(std::ranges::size(rules)) {
    const auto s = std::get<0>(grid_size) * std::get<1>(grid_size) * std::get<2>(grid_size);
    for (auto& m : matchMask) m.resize(s);
  };

  inline constexpr auto addMatch(auto&& grid_size, auto&& r, auto&& u) noexcept -> void {
    matchMask[r][toIndex(u, grid_size)] = true;
    matches.push_back(std::make_tuple(r, u));
  }

  static inline constexpr auto inBounds(const math::Vector3I &u,
                                        const math::Vector3I &b1,
                                        const math::Vector3I &b2) noexcept
      -> bool {
    const auto lower = math::Vector3I{
        std::min(b1.x, b2.x),
        std::min(b1.y, b2.y),
        std::min(b1.z, b2.z),
    };
    const auto upper = math::Vector3I{
        std::max(b1.x, b2.x),
        std::max(b1.y, b2.y),
        std::max(b1.z, b2.z),
    };
    return lower.x <= u.x and u.x <= upper.x
       and lower.y <= u.y and u.y <= upper.y
       and lower.z <= u.z and u.z <= upper.z;
  }

  inline constexpr auto loadMatches(Grid& grid, const std::vector<math::Vector3I>& changes, const auto& next_change)
      noexcept -> bool {

    const auto &[MZ, MY, MX] = grid.size;
    const auto M = math::Vector3I{MX, MY, MZ};

    if (next_change != std::ranges::end(changes)) {
      for (const auto &u : std::ranges::subrange(next_change, std::ranges::end(changes))) {
        const auto &value = grid.at(u);
        for (const auto &[rule, r] : std::views::zip(rules, std::views::iota(0u))) {
          const auto &[IMZ, IMY, IMX] = rule.input_size;
          const auto IM = math::Vector3I{IMX, IMY, IMZ};

          for (const auto &shift : rule.ishifts.at(value)) {
            const auto s = u - shift;

            if (not inBounds(s, {0, 0, 0}, M - IM))
              continue;
            if (not matchMask.at(r).at(toIndex(s, grid.size)) and grid.matches(rule, s))
              addMatch(grid.size, r, s);
          }
        }
      }
    } else {
      matches.clear();
      for (const auto &[rule, r] : std::views::zip(rules, std::views::iota(0u))) {
        const auto &[IMZ, IMY, IMX] = rule.input_size;
        const auto IM = math::Vector3I{IMX, IMY, IMZ};

        for (const auto &z : std::views::iota(IMZ - 1, MZ) | std::views::stride(IMZ))
        for (const auto &y : std::views::iota(IMY - 1, MY) | std::views::stride(IMY))
        for (const auto &x : std::views::iota(IMX - 1, MX) | std::views::stride(IMX)) {
          const auto u = math::Vector3I{x, y, z};

          const auto &value = grid.at(u);
          for (const auto &shift : rule.ishifts.at(value)) {
            const auto s = u - shift;

            if (not inBounds(s, {0, 0, 0}, M - IM))
              continue;
            if (grid.matches(rule, s))
              addMatch(grid.size, r, s);
          }
        }
      }
    }

    return true;
  }
};