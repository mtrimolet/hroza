export module rulenode;

import std;
import glm;
import stormkit.Core;
import utils;

import grid;
import rule;
import field;

using namespace stormkit;
using symbol = char;
using grid_view = std::mdspan<const symbol, std::dims<3>>;
using potential_view = std::unordered_map<symbol, std::mdspan<const std::optional<UInt>, std::dims<3>>>;

export
struct Match {
  math::Vector3U u;
  Rule rule;
};

inline constexpr auto match(grid_view grid, const Match& match) noexcept -> bool {
  return std::ranges::all_of(
    std::views::zip(
      mdiota(Area3U{toSentinel(match.rule.input.extents)} + match.u),
      match.rule.input
    ),
    [grid{std::move(grid)}](auto&& input) noexcept {
      auto&& [v, value] = input;
      return value == std::nullopt
          or value->contains(grid[v.z, v.y, v.x]);
    }
  );
}

inline constexpr auto changes(grid_view grid, const Match& match) noexcept -> decltype(auto) {
  return std::views::zip(
    mdiota(Area3U{toSentinel(match.rule.output.extents)} + match.u),
    match.rule.output
  )
    | std::views::filter([grid{std::move(grid)}](auto&& output) noexcept {
        auto&& [v, value] = output;
        return  value != std::nullopt
           and *value != grid[v.z, v.y, v.x];
    })
    | std::views::transform([](auto&& output) noexcept {
        return Change<symbol>{std::get<0>(output), *std::get<1>(output)};
    });
}

inline constexpr auto matches(
  grid_view grid,
  std::span<const Rule> rules,
  std::span<const Change<symbol>> changes = {}
) noexcept -> decltype(auto) {
  if (std::ranges::empty(changes)) {
    return rules
      | std::views::transform([g_sentinel{toSentinel(grid.extents())}](const Rule& rule) noexcept {
          const auto ri_sentinel = toSentinel(rule.input.extents);
          const auto sentinel = g_sentinel - (ri_sentinel - math::Vector3U{1u, 1u, 1u});
          return mdiota({sentinel})
            | std::views::transform([&rule](auto u) noexcept {
                return Match{u, rule};
            });
      })
      | std::views::join
      | std::ranges::to<std::vector>();
  }

  return rules
    | std::views::transform([&changes, &g_extents{grid.extents()}](const Rule& rule) noexcept {
        auto rchanges = changes
          | std::views::transform([
              g_sentinel{toSentinel(g_extents)}, 
              ri_sentinel{toSentinel(rule.input.extents)}
            ](const Change<symbol>& change) noexcept {
              const auto neigh_zone = Area3U{ri_sentinel};
              const auto neigh_offset = ri_sentinel - math::Vector3U{1u, 1u, 1u};
              const auto update_zone = intersect(
                neigh_zone + change.u,
                Area3U{neigh_offset, g_sentinel}
              ) - neigh_offset;
              return mdiota(update_zone);
          })
          | std::views::join
          | std::ranges::to<std::unordered_set>();
        return std::move(rchanges)
          | std::views::transform([&rule](auto u) noexcept {
              return Match{u, rule};
          });
    })
    | std::views::join
    | std::ranges::to<std::vector>();
}

struct RulesMatcher {
  std::vector<Rule> rules;
  std::vector<Match> matches;

  RulesMatcher(std::vector<Rule>&& _rules) noexcept
    : rules{std::move(_rules)}, matches{} {}

  inline constexpr auto refreshMatches(grid_view grid, std::span<const Change<symbol>> changes = {}) noexcept -> decltype(auto) {
    matches.append_range(::matches(grid, rules, changes)
      | std::views::filter(bindFront(::match, grid)));
  }
};

/********* */

struct EventTracker {
  std::optional<RangeOffset> prev;

  template <std::ranges::input_range History>
  inline constexpr auto getNewEvents(History&& history) noexcept -> decltype(auto) {
    const auto now = std::ranges::cend(history);
    const auto since = prev
      .transform(bindFront(std::plus{}, std::ranges::cbegin(history)))
      .value_or(now);
    prev = std::ranges::size(history);

    return std::ranges::subrange(since, now);
  }
};

/********* */

inline constexpr auto score(grid_view grid, potential_view ps, std::unordered_map<symbol, Field> fields, const Match& match) noexcept -> decltype(auto) {
  return std::ranges::fold_left(
    std::views::zip(
      mdiota(Area3U{toSentinel(match.rule.output.extents)} + match.u),
      match.rule.input,
      match.rule.output
    )
    | std::views::filter([&grid, &ps] (auto&& _tuple) noexcept {
        auto&& [u, i, o] = _tuple;
        return o != std::nullopt
           and i != std::nullopt
           and not i->contains(*o)
           and ps.contains(*o)
           and ps.at(*o)[u.z, u.y, u.x] != std::nullopt
           and ps.contains(grid[u.z, u.y, u.x])
           and ps.at(grid[u.z, u.y, u.x])[u.z, u.y, u.x] != std::nullopt;
    })
    | std::views::transform([&grid, &ps, &fields] (auto&& _tuple) noexcept {
        auto&& [u, i, o] = _tuple;
        // fields.inversed ?
        return *(ps.at(*o)[u.z, u.y, u.x]) - *(ps.at(grid[u.z, u.y, u.x])[u.z, u.y, u.x]);
    }),
    0, std::plus{}
  );
}

struct PotentialFields {
  double temperature;
  std::unordered_map<symbol, Field> fields;
};

/********* */

export
struct One : EventTracker, RulesMatcher, PotentialFields {
  One(double temperature, std::unordered_map<symbol, Field>&& _fields, std::vector<Rule>&& _rules) noexcept
    : EventTracker{},
    RulesMatcher{std::move(_rules)},
    PotentialFields{temperature, std::move(_fields)} {}

  inline constexpr auto operator()(const TracedGrid<symbol>& grid) noexcept -> decltype(auto) {
    const auto changes = EventTracker::getNewEvents(grid.history)
      | std::ranges::to<std::vector>();

    auto mdgrid = std::mdspan{std::ranges::cdata(grid), grid.extents};
    std::erase_if(this->matches, std::not_fn(bindFront(::match, mdgrid)));
    RulesMatcher::refreshMatches(mdgrid, changes);
    if (std::ranges::empty(this->matches)) return std::vector<Change<symbol>>{};

    const auto potentials = this->fields
      | std::views::transform([potential{bindBack(&Field::potential, mdgrid)}](auto&& x) noexcept {
          auto&& [c, f] = x;
          return std::make_pair(c, potential(f));
      })
      | std::ranges::to<std::unordered_map>();
    
    if (not std::ranges::empty(potentials)
        and std::ranges::all_of(potentials, [](auto&& x) noexcept {
          return std::ranges::empty(std::get<1>(x));
        })
    )
      return std::vector<Change<symbol>>{};

    const auto mdpotentials = potentials
      | std::views::transform([](auto&& x) noexcept {
          auto&& [c, p] = x;
          return std::make_pair(c, std::mdspan{std::ranges::cdata(p), p.extents});
      })
      | std::ranges::to<std::unordered_map>();

    if (not std::ranges::empty(mdpotentials)) {
      const auto score = bindFront(::score, mdgrid, mdpotentials, this->fields);
      const auto first_h = score(this->matches[0]);
      std::ranges::sort(
        this->matches,
        std::ranges::less{},
        [this, &score, &first_h](const Match& m) noexcept {
          static auto rg = std::mt19937{std::random_device{}()};
          static auto prob = std::uniform_real_distribution<>(0.0, 1.0);
          const auto h = score(m);
          const auto u = prob(rg);
          return this->temperature > 0 ? std::pow(u, std::exp((h - first_h) / this->temperature)) : -h + 0.001 * u;
        }
      );
    }
    else {
      static auto rg = std::mt19937{std::random_device{}()};
      std::ranges::shuffle(this->matches, rg);
    }

    return this->matches
      | std::views::take(1)
      | std::views::transform(bindFront(::changes, mdgrid))
      | std::views::join
      | std::ranges::to<std::vector>();
  }
};

export
struct Prl : EventTracker, RulesMatcher {
  Prl(std::vector<Rule>&& x) noexcept
    : RulesMatcher{std::move(x)}, EventTracker{} {}

  inline constexpr auto operator()(const TracedGrid<symbol>& grid) noexcept -> decltype(auto) {
    const auto changes = EventTracker::getNewEvents(grid.history)
      | std::ranges::to<std::vector>();

    auto mdgrid = std::mdspan{std::ranges::cdata(grid), grid.extents};
    std::erase_if(this->matches, std::not_fn(bindFront(::match, mdgrid)));
    RulesMatcher::refreshMatches(mdgrid, changes);

    return this->matches
      | std::views::filter([](auto&& match) noexcept {
          static auto rg = std::mt19937{std::random_device{}()};
          static auto prob = std::uniform_real_distribution<>(0.0, 1.0);
          return match.rule.p == 1.0 or prob(rg) <= match.rule.p;
      })
      | std::views::transform(bindFront(::changes, mdgrid))
      | std::views::join
      | std::ranges::to<std::vector>();
  }
};

export
struct All : EventTracker, RulesMatcher, PotentialFields {
  All(double temperature, std::unordered_map<symbol, Field>&& _fields, std::vector<Rule>&& _rules) noexcept
    : EventTracker{},
    RulesMatcher{std::move(_rules)},
    PotentialFields{temperature, std::move(_fields)} {}

  inline constexpr auto operator()(const TracedGrid<symbol>& grid) noexcept -> decltype(auto) {
    const auto changes = EventTracker::getNewEvents(grid.history)
      | std::ranges::to<std::vector>();

    const auto mdgrid = std::mdspan{std::ranges::cdata(grid), grid.extents};
    RulesMatcher::refreshMatches(mdgrid, changes);
    if (std::ranges::empty(this->matches)) return std::vector<Change<symbol>>{};

    const auto potentials = this->fields
      | std::views::filter([first_run{std::ranges::empty(changes)}](auto&& f) noexcept {
          return first_run or std::get<1>(f).recompute;
      })
      | std::views::transform([potential{bindBack(&Field::potential, mdgrid)}](auto&& x) noexcept {
          auto&& [c, f] = x;
          return std::make_pair(c, potential(f));
      })
      | std::ranges::to<std::unordered_map>();
    
    if (not std::ranges::empty(potentials)
        and std::ranges::all_of(potentials, [](auto&& x) noexcept {
          return std::ranges::empty(std::get<1>(x));
        })
    )
      return std::vector<Change<symbol>>{};

    const auto mdpotentials = potentials
      | std::views::transform([](auto&& x) noexcept {
          auto&& [c, p] = x;
          return std::make_pair(c, std::mdspan{std::ranges::cdata(p), p.extents});
      })
      | std::ranges::to<std::unordered_map>();

    if (not std::ranges::empty(mdpotentials)) {
      const auto score = bindFront(::score, mdgrid, mdpotentials, this->fields);
      const auto first_h = score(this->matches[0]);
      std::ranges::sort(
        this->matches,
        std::ranges::less{},
        [this, &score, &first_h](const Match& m) noexcept {
          static auto rg = std::mt19937{std::random_device{}()};
          static auto prob = std::uniform_real_distribution<>(0.0, 1.0);
          const auto h = score(m);
          const auto u = prob(rg);
          return this->temperature > 0 ? std::pow(u, std::exp((h - first_h) / this->temperature)) : -h + 0.001 * u;
        }
      );
    }
    else {
      static auto rg = std::mt19937{std::random_device{}()};
      std::ranges::shuffle(this->matches, rg);
    }

    auto filtered = std::ranges::fold_left(
      this->matches,
      std::vector<Match>{},
      [](auto&& result, auto&& match) noexcept {
        if (std::ranges::none_of(
          result,
          [&match](auto&& visited) noexcept {
            const auto overlap = intersect(
              Area3U{toSentinel(visited.rule.output.extents)} + visited.u,
              Area3U{toSentinel(match.rule.output.extents)} + match.u
            );
            return std::ranges::any_of(
              mdiota(overlap),
              [](auto&& p) noexcept {
                auto&& [v, m] = p;
                return v and m and *v != *m;
              },
              [&visited, &match](auto&& u) noexcept {
                return std::make_tuple(
                  visited.rule.output.at(u - visited.u),
                  match.rule.output.at(u - match.u)
                );
              }
            );
          }
        ))
          result.push_back(match);
        return result;
      }
    );

    this->matches.clear();

    return std::move(filtered)
      | std::views::transform(bindFront(::changes, mdgrid)) 
      | std::views::join 
      | std::ranges::to<std::vector>();
  }
};