export module rulenode;

import std;
import glm;
import stormkit.Core;
import utils;
import geometry;

import grid;
import rule;
import inference;

using namespace stormkit;
using symbol = char;
using grid_view = std::mdspan<const symbol, std::dims<3>>;

export
struct Match {
  math::Vector3U u;
  Rule rule;

  inline constexpr auto area() const noexcept -> decltype(auto) {
    return Area3U{u, toSentinel(rule.input.extents)};
  }

  inline constexpr auto match(grid_view grid) const noexcept -> decltype(auto) {
    return std::ranges::all_of(
      std::views::zip(mdiota(area()), rule.input),
      [grid{std::move(grid)}](auto&& input) noexcept {
        auto&& [v, value] = input;
        return value == std::nullopt
            or value->contains(grid[v.z, v.y, v.x]);
      }
    );
  }
  
  inline constexpr auto changes(grid_view grid) const noexcept -> decltype(auto) {
    return std::views::zip(mdiota(area()), rule.output)
      | std::views::filter([grid{std::move(grid)}](auto&& output) noexcept {
          auto&& [v, value] = output;
          return  value != std::nullopt
             and *value != grid[v.z, v.y, v.x];
      })
      | std::views::transform([](auto&& output) static noexcept {
          return Change<symbol>{std::get<0>(output), *std::get<1>(output)};
      });
  }
};

/********* */

struct EventTracker {
  std::optional<RangeOffset> prev;

  template <std::ranges::input_range History>
  inline constexpr auto newEvents(History&& history) noexcept -> decltype(auto) {
    auto&& now = std::ranges::cend(history);
    auto&& since = prev
      .transform(bindFront(std::plus{}, std::ranges::cbegin(history)))
      .value_or(now);
    prev = std::ranges::size(history);

    return std::ranges::subrange(since, now);
  }
};

struct RulesMatcher : EventTracker {
  std::vector<Rule> rules;
  std::vector<Match> matches;

  inline constexpr RulesMatcher(std::vector<Rule>&& _rules) noexcept
    : EventTracker{}, rules{std::move(_rules)}, matches{} {}

    inline constexpr auto newMatches(
      grid_view grid,
      std::span<const Change<symbol>> changes = {}
    ) const noexcept -> decltype(auto) {
      auto g_sentinel = toSentinel(grid.extents());

      if (std::ranges::empty(changes)) {
        return rules
          | std::views::transform([&g_sentinel](const Rule& rule) noexcept {
              const auto ri_sentinel = toSentinel(rule.input.extents);
              const auto sentinel = g_sentinel - (ri_sentinel - math::Vector3U{1u, 1u, 1u});
              return mdiota({sentinel})
                | std::views::transform([&rule](auto u) noexcept {
                    return Match{u, rule};
                });
          })
          | std::views::join
          | std::ranges::to<std::vector>();
      }
    
      return rules
        | std::views::transform([&changes, &g_sentinel](const Rule& rule) noexcept {
            auto rchanges = changes
              | std::views::transform([
                  updateZone{bindFront(&Rule::neighborhood, rule, g_sentinel)}
              ](const Change<symbol>& change) noexcept {
                return mdiota(updateZone(change.u));
              })
              | std::views::join
              | std::ranges::to<std::unordered_set>();
            return std::move(rchanges)
              | std::views::transform([&rule](auto u) noexcept {
                  return Match{u, rule};
              });
        })
        | std::views::join
        | std::ranges::to<std::vector>();
    }

  inline constexpr auto refreshMatches(
    grid_view grid,
    std::span<const Change<symbol>> history = {}
  ) noexcept -> decltype(auto) {
    matches.append_range(newMatches(grid, EventTracker::newEvents(history))
      | std::views::filter(bindBack(&Match::match, grid)));
  }
};

/********* */

/** Is this Metropolis-Hastings ? Monte-Carlo ?
  * It's definitely not Simulated Annealing since we're not changing the temperature.
  * What's my energy, "potential" ?? -- yes, obviously
**/
struct InferenceEngine {
  double temperature;
  std::unordered_map<symbol, DijkstraField> fields;
  std::unordered_map<symbol, Grid<std::optional<Int>>> potentials;

  inline constexpr auto observe(grid_view grid) noexcept -> decltype(auto) {
    std::ranges::for_each(
      fields 
        | std::views::filter([&potentials{potentials}](auto&& _tuple) noexcept {
            auto&& [c, f] = _tuple;
            return not potentials.contains(c)
                or f.recompute;
        }),
      [&potentials{potentials}, dijmap{bindBack(&DijkstraField::dijkstraMap, std::move(grid))}]
      (auto&& _tuple) noexcept {
        auto&& [c, f] = _tuple;
        potentials.insert_or_assign(c, dijmap(f));
      }
    );
  }


  inline constexpr auto sumdiff(grid_view grid, const Match& match) noexcept -> decltype(auto) {
    return std::ranges::fold_left(
      std::views::zip(
        mdiota(match.area()),
        match.rule.input,
        match.rule.output
      )
      | std::views::filter([](auto&& _tuple) static noexcept {
          auto&& [u, i, o] = _tuple;
          return o != std::nullopt
             and i != std::nullopt
             and not i->contains(*o);
      })
      | std::views::transform([&grid, &potentials{potentials}] (auto&& _tuple) noexcept {
          auto&& [u, i, o] = _tuple;
          auto&& new_value = *o;
          auto&& old_value = grid[u.z, u.y, u.x];

          // exclude the match from selection
          if (potentials.contains(new_value) and not potentials.at(new_value)[u])
            return std::optional<int>{};

          auto&&
            new_potential = potentials.contains(new_value) ? potentials.at(new_value)[u].value() : 0,
            old_potential = potentials.contains(old_value) ? potentials.at(old_value)[u].value_or(-1) : 0; /** are we ok with -1 here ??? */

          return std::optional{new_potential - old_potential};
      }),
      std::optional<int>{0}, [](auto&& a, auto&& b) static noexcept {
        return a.and_then([&b](auto&& a) noexcept {
          return b.transform(bindFront(std::plus{}, a));
        });
      }
    );
  }

  inline constexpr auto sort(grid_view grid, std::vector<Match>& matches) noexcept -> decltype(auto) {
    static auto rg = std::mt19937{std::random_device{}()};

    if (std::ranges::empty(fields)) {
      std::ranges::shuffle(matches, rg);
      return;
    }

    auto&& heuristics = std::views::zip(matches, std::views::iota(0u))
      | std::views::transform([sumdiff{bindFront(&InferenceEngine::sumdiff, this, grid)}](auto&& _match) noexcept {
          auto&& [match, i] = _match;
          return std::make_pair(i, sumdiff(match));
      })
      | std::views::filter([](auto&& _h) static noexcept {
          auto&& [i, h] = _h;
          return h != std::nullopt;
      })
      | std::views::transform([](auto&& _h) static noexcept {
          auto&& [i, h] = _h;
          return std::make_pair(i, *h);
      })
      | std::ranges::to<std::vector>();

    if (std::ranges::empty(heuristics)) {
      matches.clear();
      return;
    }
    auto&& first_h = std::get<1>(heuristics[0]);
    auto&& scores = std::move(heuristics)
      | std::views::transform(
        [&](auto&& _h) noexcept {
          auto&& [i, h] = _h;

          static auto prob = std::uniform_real_distribution<>{};
          auto&& u = prob(rg);

          ensures(temperature == 0.0 or std::isnormal(temperature), "anormal temperature value in dijkstra inference");
          auto&& value = temperature > 0.0 
            /** Is this the metropolis rule ??? that's `e^(dE/T)`,
              * definitely a thermodynamic sampling, definitely hill climbing on distance potential
            **/
            ? std::pow(u, std::exp((h - first_h) / temperature))
            : -h + 0.001 * u;
          ensures(value == 0.0 or std::isnormal(value), "anormal score value in dijkstra inference");
          return std::make_pair(std::move(i), std::move(value));
        }
      )
      | std::ranges::to<std::vector>();

    ::sort(scores, {}, monadic::get<1>());

    matches = std::move(scores)
      | std::views::transform([&matches](auto&& _i) noexcept {
          auto&& [i, s] = _i;
          return std::move(matches[i]);
      })
      | std::ranges::to<std::vector>();
  }
};

/********* */

export
struct One : RulesMatcher, InferenceEngine {
  inline constexpr One(double temperature, std::unordered_map<symbol, DijkstraField>&& fields, std::vector<Rule>&& rules) noexcept
    : RulesMatcher{std::move(rules)},
    InferenceEngine{temperature, std::move(fields)} {}

  inline constexpr auto operator()(const TracedGrid<symbol>& grid) noexcept -> decltype(auto) {
    auto&& mdgrid = std::mdspan{std::ranges::cdata(grid), grid.extents};
    this->refreshMatches(mdgrid, grid.history);

    this->observe(mdgrid);
    this->sort(mdgrid, this->matches);

    auto&& triggered = std::ranges::find_last_if(this->matches, bindBack(&Match::match, mdgrid));
    auto r = triggered
      | std::views::take(1)
      | std::views::transform(bindBack(&Match::changes, mdgrid))
      | std::views::join
      | std::ranges::to<std::vector>();

    if (std::ranges::empty(triggered)) this->matches.clear();
    else this->matches.erase(std::ranges::begin(triggered), std::ranges::end(triggered));

    return r;
  }
};

export
struct Prl : RulesMatcher {
  inline constexpr Prl(std::vector<Rule>&& rules) noexcept
    : RulesMatcher{std::move(rules)} {}

  inline constexpr auto operator()(const TracedGrid<symbol>& grid) noexcept -> decltype(auto) {
    auto&& mdgrid = std::mdspan{std::ranges::cdata(grid), grid.extents};
    this->refreshMatches(mdgrid, grid.history);

    static auto rg = std::mt19937{std::random_device{}()};
    auto&& triggered = std::ranges::partition(this->matches, std::not_fn([](auto&& match) static noexcept {
      static auto prob = std::uniform_real_distribution<>{};
      return match.rule.p == 1.0 or prob(rg) <= match.rule.p;
    }));

    auto r = triggered
      | std::views::filter(bindBack(&Match::match, mdgrid))
      | std::views::transform(bindBack(&Match::changes, mdgrid))
      | std::views::join
      | std::ranges::to<std::vector>();

    if (std::ranges::empty(triggered)) this->matches.clear();
    else this->matches.erase(std::ranges::begin(triggered), std::ranges::end(triggered));

    return r;
  }
};

export
struct All : RulesMatcher, InferenceEngine {
  inline constexpr All(double temperature, std::unordered_map<symbol, DijkstraField>&& fields, std::vector<Rule>&& rules) noexcept
    : RulesMatcher{std::move(rules)},
    InferenceEngine{temperature, std::move(fields)} {}

  inline constexpr auto operator()(const TracedGrid<symbol>& grid) noexcept -> decltype(auto) {
    auto&& mdgrid = std::mdspan{std::ranges::cdata(grid), grid.extents};
    this->refreshMatches(mdgrid, grid.history);

    this->observe(mdgrid);
    this->sort(mdgrid, this->matches);

    auto&& triggered = std::ranges::fold_left(
      std::views::reverse(this->matches), std::vector<Match>{},
      [](auto&& triggered, auto&& match) static noexcept {
        if (std::ranges::none_of(
          triggered,
          [&match](auto&& visited) noexcept {
            auto&& overlap = visited.area().meet(match.area());
            return std::ranges::any_of(
              mdiota(overlap),
              [](auto&& p) static noexcept {
                auto&& [v, m] = p;
                return v and m;
              },
              [&visited, &match](auto&& u) noexcept {
                return std::make_tuple(
                  visited.rule.output.at(u - visited.u),
                  match.rule.output.at(u - match.u)
                );
              }
            );
          }
        ))
          triggered.push_back(std::move(match));
        return triggered;
      }
    );

    this->matches.clear();

    return std::move(triggered)
      | std::views::transform(bindBack(&Match::changes, mdgrid)) 
      | std::views::join 
      | std::ranges::to<std::vector>();
  }
};