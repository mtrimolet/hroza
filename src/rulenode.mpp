export module rulenode;

import std;
import glm;
import stormkit.core;
import utils;
import geometry;

import grid;
import rewriterule;
import match;
import rewriteengine;
import dijkstraengine;
import observationengine;
import searchengine;

using namespace stormkit;

/*
if node contains a "<observe>"
-> if node has "search=True"
----> bidirectional search inference {limit, depthCoefficient}       <-- produces trajectory
-> else
----> next-step backward inference {temperature}                     <-- produces potential
else if node contains a "<field>"
-> distance inference (aka dijkstra map) {temperature}               <-- produces potential
else
-> random
*/

export {

struct One : RewriteEngine {
  DijkstraEngine    dijkstra;
  ObservationEngine observe;
  SearchEngine      search;

  inline constexpr One(std::vector<RewriteRule>&& rules) noexcept
  : RewriteEngine{std::move(rules)}
  {}

  inline constexpr One(
    double temperature,
    DijkstraFields&& fields,
    std::vector<RewriteRule>&& rules
  ) noexcept
  : RewriteEngine{std::move(rules)},
    dijkstra{temperature, std::move(fields)}
  {}

  inline constexpr One(
    double temperature,
    Observations&& observations,
    std::vector<RewriteRule>&& rules
  ) noexcept
  : RewriteEngine{std::move(rules)},
    observe{temperature, std::move(observations)}
  {}

  inline constexpr One(
    std::optional<UInt>&& limit, double depthCoefficient,
    Observations&& observations,
    std::vector<RewriteRule>&& rules
  ) noexcept
  : RewriteEngine{std::move(rules)},
    search{std::move(limit), depthCoefficient, std::move(observations)}
  {}

  auto operator()(const TracedGrid<char>& grid) noexcept -> std::vector<Change<char>>;
};

struct Prl : RewriteEngine {
  inline constexpr Prl(std::vector<RewriteRule>&& rules) noexcept
  : RewriteEngine{std::move(rules)}
  {}

  auto operator()(const TracedGrid<char>& grid) noexcept -> std::vector<Change<char>>;
};

struct All : RewriteEngine {
  DijkstraEngine    dijkstra;
  ObservationEngine observe;
  SearchEngine      search;

  inline constexpr All(std::vector<RewriteRule>&& rules) noexcept
  : RewriteEngine{std::move(rules)}
  {}

  inline constexpr All(
    double temperature,
    DijkstraFields&& fields,
    std::vector<RewriteRule>&& rules
  ) noexcept
  : RewriteEngine{std::move(rules)},
    dijkstra{temperature, std::move(fields)}
  {}

  inline constexpr All(
    double temperature,
    Observations&& observations,
    std::vector<RewriteRule>&& rules
  ) noexcept
  : RewriteEngine{std::move(rules)},
    observe{temperature, std::move(observations)}
  {}

  inline constexpr All(
    std::optional<UInt>&& limit, double depthCoefficient,
    Observations&& observations,
    std::vector<RewriteRule>&& rules
  ) noexcept
  : RewriteEngine{std::move(rules)},
    search{std::move(limit), depthCoefficient, std::move(observations)}
  {}

  auto operator()(const TracedGrid<char>& grid) noexcept -> std::vector<Change<char>>;
};

}
