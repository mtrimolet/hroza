export module rulenode;

import std;
import glm;
import stormkit.core;
import utils;

import grid;
import rewriterule;
import match;

import potentials;
import fields;
import observes;
import search;

using namespace stormkit;

// TODO: CRTP / deducing-this ?

export
struct RuleNode {
  enum struct Mode { ONE, ALL, PRL };
  Mode mode;

  std::vector<RewriteRule> rules;
  RewriteRule::Unions unions;

  enum struct Inference { RANDOM, DISTANCE, OBSERVE, SEARCH };
  Inference inference = Inference::RANDOM;

  double temperature = 0.0;

  UInt   limit = 0;
  double depthCoefficient = 0.5;

  Fields   fields = {};
  Observes observes = {};

  Potentials potentials = {};
  Future     future = {};
  Trajectory trajectory = {};

  inline constexpr RuleNode(Mode _mode, std::vector<RewriteRule>&& _rules, RewriteRule::Unions&& _unions) noexcept 
  : mode{_mode}, rules{std::move(_rules)}, unions{std::move(_unions)}
  {}

  inline constexpr RuleNode(Mode _mode, std::vector<RewriteRule>&& _rules, RewriteRule::Unions&& _unions, Fields&& _fields, double _temperature = 0.0) noexcept 
  : mode{_mode}, rules{std::move(_rules)}, unions{std::move(_unions)},
    inference{Inference::DISTANCE}, temperature{_temperature}, fields{std::move(_fields)}
  {}

  inline constexpr RuleNode(Mode _mode, std::vector<RewriteRule>&& _rules, RewriteRule::Unions&& _unions, Observes&& _observes, double _temperature = 0.0) noexcept 
  : mode{_mode}, rules{std::move(_rules)}, unions{std::move(_unions)},
    inference{Inference::OBSERVE}, temperature{_temperature}, observes{std::move(_observes)}
  {}

  inline constexpr RuleNode(Mode _mode, std::vector<RewriteRule>&& _rules, RewriteRule::Unions&& _unions, Observes&& _observes, UInt _limit = 0, double _depthCoefficient = 0.0) noexcept 
  : mode{_mode}, rules{std::move(_rules)}, unions{std::move(_unions)},
    inference{Inference::SEARCH}, limit{_limit}, depthCoefficient{_depthCoefficient}, observes{std::move(_observes)}
  {}

  auto operator()(const TracedGrid<char>& grid) noexcept -> std::vector<Change<char>>;

private:
  std::vector<Match> matches = {};

  std::optional<RangeOffset> prev = {};
  auto scan(const TracedGrid<char>& grid) noexcept -> std::vector<Match>;

  std::ranges::iterator_t<decltype(matches)> active = std::ranges::begin(matches);

  std::mt19937 rng = {};

  auto infer(const Grid<char>& grid) noexcept -> std::vector<Change<char>>;
  auto delta(const Grid<char>& grid, const Match& match) noexcept -> double;
};
