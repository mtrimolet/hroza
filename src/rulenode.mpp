export module rulenode;

import std;
import glm;
import stormkit.Core;
import utils;
import geometry;

import symbols;
import grid;
import rewriterule;
import match;
import rewriteengine;
import dijkstraengine;
import searchengine;

using namespace stormkit;
using symbol = char;

export
struct One : RewriteEngine, DijkstraEngine, SearchEngine {
  inline constexpr One(
    double temperature,
    std::unordered_map<symbol, DijkstraField>&& fields, 

    bool search, std::optional<UInt> limit, double depthCoefficient,
    std::unordered_map<symbol, Observation>&& observations,

    std::vector<RewriteRule>&& rules
  ) noexcept
    : RewriteEngine{std::move(rules)},
    DijkstraEngine{temperature, std::move(fields)},
    SearchEngine{search, limit, depthCoefficient, std::move(observations)}
  {}

  inline constexpr auto operator()(const TracedGrid<symbol>& grid) noexcept -> decltype(auto) {
    auto changes = this->updateFuture(grid, this->rules);
    // if (not std::ranges::empty(this->future)) {
    //   changes.append_range(this->followTrajectory());
    //   return changes;
    // }

    this->updateMatches(grid, grid.history);

    this->updatePotentials(grid);
    if (this->essential_missing()) return std::vector<Change<symbol>>{};
    this->applyPotentials(grid, this->matches);

    auto&& triggered = std::ranges::find_last_if(this->matches, bindBack(&Match::match, grid));
    changes.append_range(triggered
      | std::views::take(1)
      | std::views::transform(bindBack(&Match::changes, grid))
      | std::views::join);

    if (std::ranges::empty(triggered)) this->matches.clear();
    else this->matches.erase(
      std::ranges::begin(triggered), 
      std::ranges::end(triggered)
    );

    return changes;
  }
};

export
struct Prl : RewriteEngine {
  inline constexpr Prl(std::vector<RewriteRule>&& rules) noexcept
    : RewriteEngine{std::move(rules)} {}

  inline constexpr auto operator()(const TracedGrid<symbol>& grid) noexcept -> decltype(auto) {
    this->updateMatches(grid, grid.history);

    static auto rg = std::mt19937{std::random_device{}()};
    auto&& triggered = std::ranges::partition(this->matches, std::not_fn([](auto&& match) static noexcept {
      static auto prob = std::uniform_real_distribution<>{};
      return match.rule.p == 1.0 or prob(rg) <= match.rule.p;
    }));

    auto changes = triggered
      | std::views::filter(bindBack(&Match::match, grid))
      | std::views::transform(bindBack(&Match::changes, grid))
      | std::views::join
      | std::ranges::to<std::vector>();

    if (std::ranges::empty(triggered)) this->matches.clear();
    else this->matches.erase(
      std::ranges::begin(triggered),
      std::ranges::end(triggered)
    );

    return changes;
  }
};

export
struct All : RewriteEngine, DijkstraEngine, SearchEngine {
  inline constexpr All(
    double temperature,
    std::unordered_map<symbol, DijkstraField>&& fields, 

    bool search, std::optional<UInt> limit, double depthCoefficient,
    std::unordered_map<symbol, Observation>&& observations,

    std::vector<RewriteRule>&& rules
  ) noexcept
    : RewriteEngine{std::move(rules)},
    DijkstraEngine{temperature, std::move(fields)},
    SearchEngine{search, limit, depthCoefficient, std::move(observations)}
  {}

  static inline constexpr auto removeOverlaps(std::ranges::input_range auto&& matches) noexcept -> decltype(auto) {
    return std::ranges::fold_left(matches, std::vector<Match>{},
      [](auto&& triggered, auto&& match) static noexcept {
        if (std::ranges::none_of(triggered, [&match](auto&& visited) noexcept {
            auto&& overlap = visited.area().meet(match.area());
            return std::ranges::any_of(
              mdiota(overlap),
              [](auto&& p) static noexcept {
                return std::apply(std::logical_and<std::optional<symbol>>{}, p);
              },
              [&visited, &match](auto&& u) noexcept {
                return std::make_tuple(
                  visited.rule.output.at(u - visited.u),
                  match.rule.output.at(u - match.u)
                );
              }
            );
          }
        ))
          triggered.push_back(std::move(match));
        return triggered;
      }
    );
  }
  
  inline constexpr auto operator()(const TracedGrid<symbol>& grid) noexcept -> decltype(auto) {
    auto changes = this->updateFuture(grid, this->rules);
    // if (not std::ranges::empty(this->future)) {
    //   changes.append_range(this->followTrajectory());
    //   return changes;
    // }
  
    this->updateMatches(grid, grid.history);

    this->updatePotentials(grid);
    if (this->essential_missing()) return std::vector<Change<symbol>>{};
    this->applyPotentials(grid, this->matches);

    auto&& triggered = removeOverlaps(
      std::views::reverse(std::move(this->matches))
        | std::views::filter(bindBack(&Match::match, grid))
    );
    changes.append_range(std::move(triggered)
      | std::views::transform(bindBack(&Match::changes, grid))
      | std::views::join
      | std::ranges::to<std::vector>());

    this->matches.clear();

    return changes;
  }
};