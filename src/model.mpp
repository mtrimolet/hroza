export module model;

import std;
import stormkit.Core;
import pugixml;
import utils;

using namespace stormkit;

export using Palette = HashMap<char, UInt32>;

export struct Model {
  std::string_view name;
  Int linear_size;
  Int dimension;
  Int MX;
  Int MY;
  Int MZ;

  Boolean gif;
  Int amount;
  Int pixelsize;
  // std::vector<Int> seeds;
  Palette palette;
  Boolean iso;
  Int steps;
  Int gui;

  pugi::xml_document doc;
};

export auto parseModel(const pugi::xml_node &xmodel,
                       const Palette &default_palette)
    -> std::expected<Model, pugi::xml_parse_result>;

module :private;

auto parseModel(const pugi::xml_node &xmodel, const Palette &default_palette)
    -> std::expected<Model, pugi::xml_parse_result> {
  auto name = xmodel.attribute("name").as_string();
  auto linearSize = xmodel.attribute("size").as_int(-1);
  auto dimension = xmodel.attribute("d").as_int(2);
  auto gif = xmodel.attribute("gif").as_bool(false);
  auto amount = gif ? 1 : xmodel.attribute("amount").as_int(2);
  // const auto split_result = split(xmodel.attribute("seeds").as_string(), '
  // '); auto seeds = split_result |
  //              std::views::transform(monadic::as<Int>()) |
  //              std::ranges::to<std::vector>();

  auto palette = auto(default_palette);
  std::ranges::for_each(xmodel.children("color"), [&palette](const auto &c) {
    const auto symbol_str = std::string{c.attribute("symbol").as_string()};
    ensures(!std::ranges::empty(symbol_str));
    // use .emplace if new values
    palette.at(symbol_str[0]) =
        (255u << 24u) + fromBase<UInt32>(c.attribute("value").as_string(), 16);
  });

  auto doc = pugi::xml_document{};
  const auto load_result =
      doc.load_file(std::data(std::format("models/{}.xml", name)));
  if (!load_result)
    return std::unexpected{load_result};

  return Model{
      name, linearSize, dimension,
      xmodel.attribute("length").as_int(linearSize),
      xmodel.attribute("width").as_int(linearSize),
      xmodel.attribute("height").as_int(dimension == 2 ? 1 : linearSize), gif,
      amount, xmodel.attribute("pixelsize").as_int(4),
      // std::move(seeds),
      std::move(palette), xmodel.attribute("iso").as_bool(false),
      xmodel.attribute("steps").as_int(gif ? 1000 : 50000),
      xmodel.attribute("gui").as_int(0), std::move(doc)};
}