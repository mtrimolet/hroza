export module node;

import std;
import stormkit.Core;

import grid;

using namespace stormkit;

export {

template <class T>
using Action = std::function<Grid<T>(const Grid<T>&)>;

template <class T>
inline auto limit(UInt count, const Action<T>& action, const Grid<T>& grid) noexcept -> std::generator<Grid<T>> {
  auto current_grid = grid;
  for (; count > 0u; count--) {
    auto result_grid = action(current_grid);
    if (result_grid == current_grid) break;
    current_grid = result_grid;
    co_yield result_grid;
  }
}

template <class T>
struct Limit {
  UInt count;
  Action<T> action;
  inline constexpr auto operator()(const Grid<T>& grid) const noexcept-> decltype(auto) {
    return limit<T>(count, action, grid);
  }
};

template <class T>
inline auto no_limit(Action<T> action, const Grid<T>& grid) -> std::generator<Grid<T>> {
  auto current_grid = grid;
  for (;;) {
    auto result_grid = action(current_grid);
    if (result_grid == current_grid) break;
    current_grid = result_grid;
    co_yield result_grid;
  }
}

template <class T>
struct NoLimit {
  Action<T> action;
  inline constexpr auto operator()(const Grid<T>& grid) const noexcept -> decltype(auto) {
    return limit<T>(0xff, action, grid);
  }
};

template <class T>
using Node = std::function<std::generator<Grid<T>>(const Grid<T>&)>;

template <class T>
inline auto sequence(std::span<const Node<T>> nodes, const Grid<T>& grid) noexcept -> std::generator<Grid<T>> {
  auto current_grid = grid;
  for (auto current_node : nodes)
    for (auto result_grid : current_node(current_grid)) {
      current_grid = result_grid;
      co_yield result_grid;
  }
}

template <class T>
struct Sequence {
  std::vector<Node<T>> nodes;
  inline constexpr auto operator()(const Grid<T>& grid) const noexcept -> decltype(auto) {
    return sequence<T>(nodes, grid);
  }
};

template <class T>
inline auto markov(std::span<const Node<T>> nodes, const Grid<T>& grid) noexcept -> std::generator<Grid<T>> {
  auto current_grid = grid;
  auto current_node = std::ranges::begin(nodes);
  while (current_node != std::ranges::end(nodes)) {
    auto found = false;
    for (auto result_grid : (*current_node)(current_grid)) {
      if (not found) found = true;
      current_grid = result_grid;
      co_yield result_grid;
    }
    if (found)
      current_node = std::ranges::begin(nodes);
    else
      current_node++;
  }
}

template <class T>
struct Markov {
  std::vector<Node<T>> nodes;
  inline constexpr auto operator()(const Grid<T>& grid) const noexcept -> decltype(auto) {
    return markov<T>(nodes, grid);
  }
};

}