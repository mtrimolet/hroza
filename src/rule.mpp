export module rule;

import std;
import stormkit.Core;

import grid;

using namespace stormkit;

export {

struct Rule {
  std::vector<std::optional<std::unordered_set<char>>> input;
  std::vector<std::optional<char>> output;
};

inline constexpr auto match(const Grid& grid, UInt u, const Rule& rule) noexcept -> decltype(auto) {
  return std::ranges::all_of(
    std::views::zip(rule.input, std::views::iota(u)),
    [&grid](const auto& input) noexcept {
      const auto& [value, v] = input;
      if (value == std::nullopt) return true;
      return std::ranges::find(*value, grid.at(v)) != std::ranges::end(*value);
    }
  );
}

inline constexpr auto changes(const Grid& grid, UInt u, const Rule& rule) noexcept -> decltype(auto) {
  return std::views::zip(rule.output, std::views::iota(u))
    | std::views::filter([&grid](const auto& output) noexcept {
        const auto& [value, v] = output;
        if (value == std::nullopt) return false;
        return *value != grid.at(v);
    })
    | std::views::transform([](auto&& output) noexcept { return std::make_tuple(*std::get<0>(output), std::get<1>(output)); })
    | std::ranges::to<std::vector>();
}

inline constexpr auto apply(Grid& grid, UInt u, const Rule& rule) noexcept -> decltype(auto) {
  std::ranges::for_each(changes(grid, u, rule), [&grid](const auto& output) noexcept {
    const auto& [value, v] = output;
    grid[v] = value;
  });
}

template <std::ranges::sized_range A, std::ranges::sized_range B>
    // requires std::ranges::sized_range<A> and std::ranges::sized_range<B>
inline constexpr auto cartesian_product(A&& a, B&& b) noexcept {
  return std::forward<A>(a) 
    | std::views::transform([&b] (const auto& i) noexcept {
        return std::forward<B>(b)
          | std::views::transform([&i] (const auto& j) noexcept { return std::make_pair(i, j); })
          | std::ranges::to<std::vector>();
    }) 
  | std::views::join
  | std::ranges::to<std::vector>();
}

inline constexpr auto matches(const Grid& grid, std::span<const Rule> rules) noexcept -> decltype(auto) {
  return rules
    | std::views::transform([&grid](auto& rule) noexcept {
        return std::views::iota(0u, std::ranges::size(grid) - std::ranges::size(rule.input))
          | std::views::transform([&rule](auto u) noexcept { return std::make_pair(u, auto{rule}); });
      })
    | std::views::join
    | std::views::filter([&grid](const auto& match) {
        const auto& [u, rule] = match;
        if (u > std::size(grid) - std::size(rule.input)) return false;
        return ::match(grid, u, rule);
    })
    | std::ranges::to<std::vector>();
}

/********* */

inline constexpr auto one(std::span<const Rule> rules, const Grid& grid) noexcept -> decltype(auto) {
  auto matches = ::matches(grid, rules);
  if (std::empty(matches)) return auto{grid};

  static auto rg = std::mt19937{std::random_device{}()};
  std::ranges::shuffle(matches, rg);
  const auto& [u, rule] = matches[0];
  auto current_grid = auto{grid};
  apply(current_grid, u, rule);
  return current_grid;
}

struct One {
  std::vector<Rule> rules;
  inline constexpr auto operator()(const Grid& grid) const noexcept -> decltype(auto) {
    return one(rules, grid);
  }
};

inline constexpr auto prl(std::span<const Rule> rules, const Grid& grid) noexcept -> decltype(auto) {
  auto current_grid = auto{grid};
  std::ranges::for_each(matches(grid, rules), [&current_grid](const auto& match) noexcept {
    const auto& [u, rule] = match;
    apply(current_grid, u, rule);
  });
  return current_grid;
}

struct Prl {
  std::vector<Rule> rules;
  inline constexpr auto operator()(const Grid& grid) const noexcept -> decltype(auto) {
    return prl(rules, grid);
  }
};

inline constexpr auto all(std::span<const Rule> rules, const Grid& grid) noexcept -> decltype(auto) {
  auto matches = ::matches(grid, rules);
  if (std::empty(matches)) return auto{grid};

  static auto rg = std::mt19937{std::random_device{}()};
  std::ranges::shuffle(matches, rg);
  const auto cleaned = std::ranges::fold_left(matches, std::vector<decltype(matches)::value_type>{}, [](auto a, auto m) noexcept {
    if (std::ranges::find_if(a, [&m](auto i) noexcept { return std::get<0>(i) == std::get<0>(m); }) != std::ranges::end(a))
      return a;
    a.push_back(m);
    return a;
  });
  auto current_grid = auto{grid};
  std::ranges::for_each(cleaned, [&current_grid](const auto& m) noexcept {
    const auto& [u, rule] = m;
    apply(current_grid, u, rule);
  });
  return current_grid;
}

struct All {
  std::vector<Rule> rules;
  inline constexpr auto operator()(const Grid& grid) const noexcept -> decltype(auto) {
    return all(rules, grid);
  }
};

}