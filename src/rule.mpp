export module rule;

import std;
import glm;
import stormkit.Core;
import pugixml;
import symmetry;
import utils;

using namespace stormkit;

export struct Rule {
public:
  using State = UInt;
  using Symbol = char;
  using Wave = std::vector<bool>;

  Size input_size, output_size;

  // size(input) == input_size[0] * input_size[1] * input_size[2];
  std::vector<Wave> input;

  // size(output) == output_size[0] * output_size[1] * output_size[2];
  std::vector<std::optional<State>> output;

  double p;
  // size(binput) == size(input);
  std::vector<State> binput;
  // size(ishifts) == size(oshifts) == size(grid.symbols);
  // size(ishifts[i]) == size(input);
  // size(oshifts[i]) == size(output);
  std::vector<std::vector<math::Vector3I>> ishifts, oshifts;

  bool original;

private:
  Rule(
    auto&& _input_size, auto&& _output_size,
    auto&& in, auto&& out,
    auto p, auto original, auto symbol_count
  ) noexcept
  : input_size{std::move(_input_size)}, output_size{std::move(_output_size)},
  input{std::move(in)}, output{std::move(out)}, p{p},
  binput{std::views::repeat(as<State>(0xff), std::ranges::size(input)) | std::ranges::to<std::vector>()},
  ishifts{std::views::iota(0u, symbol_count) | std::views::transform([this](auto c) {
      return std::views::zip(input, std::views::iota(0u))
        | std::views::filter([c](const auto& inp){ return std::get<0>(inp).at(c); })
        | std::views::transform([this](const auto& inp) { return fromIndex(std::get<1>(inp), input_size); })
        | std::ranges::to<std::vector>();
    }) | std::ranges::to<std::vector>()},
  oshifts{std::views::repeat(std::vector<math::Vector3I>{}, symbol_count) | std::ranges::to<std::vector>()},
  original{original} {}

  template <char Zsep, char Ysep>
  inline static constexpr auto split(std::string_view str) noexcept -> decltype(auto) {
    const auto block = str
      | std::views::split(Zsep)
      | std::views::transform([](const auto& square){ 
          return square
            | std::views::split(Ysep)
            | std::views::transform([](const auto& line){
                return line | std::ranges::to<std::vector>();
              })
            | std::ranges::to<std::vector>(); 
        })
      | std::ranges::to<std::vector>();

    return std::make_tuple(
      Size{
        std::ranges::size(block),
        std::ranges::size(block.at(0)),
        std::ranges::size(block.at(0).at(0))},
      block
        | std::views::transform([](auto& square){
          return square | std::views::join;
        })
        | std::views::join
        | std::ranges::to<std::vector>());
  }

public:
  inline static constexpr auto parse(const pugi::xml_node &xrule,
                    const std::unordered_map<Symbol, Wave>& waves,
                    const std::unordered_map<Symbol, State>& values)
      noexcept -> Rule {

    const auto inString = std::string{xrule.attribute("in").as_string()};
    ensures(!std::ranges::empty(inString),
            std::format("missing '{}' attribute in '{}' node [:{}]", "in", "rule", xrule.offset_debug()));
    const auto outString = std::string{xrule.attribute("out").as_string()};
    ensures(!std::ranges::empty(outString),
            std::format("missing '{}' attribute in '{}' node [:{}]", "out", "rule", xrule.offset_debug()));
    // auto finString = xrule.attribute("fin").as_string();
    // auto foutString = xrule.attribute("fout").as_string();
    // auto fileString = xrule.attribute("file").as_string();
    // auto legend = xrule.attribute("legend").as_string();

    auto [input_size, input] = split<' ', '/'>(inString);
    auto [output_size, output] = split<' ', '/'>(outString);

    return Rule{
        input_size,
        output_size,
        input
          | std::views::transform([&waves](const auto& symbol) { return waves.at(symbol); })
          | std::ranges::to<std::vector>(),
        output
          | std::views::transform([&values](const auto& symbol) { return symbol == '*' ? std::nullopt : std::optional{values.at(symbol)}; })
          | std::ranges::to<std::vector>(),
        xrule.attribute("p").as_double(1.0f),
        true, std::ranges::size(values)
    };
  }

  inline constexpr auto zrotated() const noexcept -> Rule {
    auto new_input_size = Size{
      std::get<0>(input_size),
      std::get<2>(input_size),
      std::get<1>(input_size)};
    auto new_input = std::views::iota(0u, std::ranges::size(input))
      | std::views::transform([&](auto i){
          const auto u = fromIndex(i, new_input_size);
          const auto from_u = math::Vector3I{
            std::get<1>(new_input_size) - 1 - u.y,
            u.x,
            u.z};
          return input.at(toIndex(from_u, input_size));
      })
      | std::ranges::to<std::vector>();

    auto new_output_size = Size{
      std::get<0>(output_size),
      std::get<2>(output_size),
      std::get<1>(output_size)};
    auto new_output = std::views::iota(0u, std::ranges::size(output))
      | std::views::transform([&](auto i){
          const auto u = fromIndex(i, new_output_size);
          const auto from_u = math::Vector3I{
            std::get<1>(new_output_size) - 1 - u.y,
            u.x,
            u.z};
          return output.at(toIndex(from_u, output_size));
      })
      | std::ranges::to<std::vector>();

    return Rule{
      std::move(new_input_size), 
      std::move(new_output_size), 
      std::move(new_input),
      std::move(new_output),
      p, false,
      std::ranges::size(ishifts),
    };
  }

  inline constexpr auto yrotated() const noexcept -> Rule {
    auto new_input_size = Size{
      std::get<2>(input_size),
      std::get<1>(input_size),
      std::get<0>(input_size)};
    auto new_input = std::views::iota(0u, std::ranges::size(input))
      | std::views::transform([&](UInt i){
          const auto u = fromIndex(i, new_input_size);
          return input.at(toIndex({std::get<2>(input_size) - 1 - u.z, u.y, u.x}, input_size));
      })
      | std::ranges::to<std::vector>();

    auto new_output_size = Size{
      std::get<2>(output_size),
      std::get<1>(output_size),
      std::get<0>(output_size)};
    auto new_output = std::views::iota(0u, std::ranges::size(output))
      | std::views::transform([&](auto i){
          const auto u = fromIndex(i, new_output_size);
          return output.at(toIndex({std::get<2>(output_size) - 1 - u.z, u.y, u.x}, output_size));
      })
      | std::ranges::to<std::vector>();

    return Rule{
      std::move(new_input_size), 
      std::move(new_output_size), 
      std::move(new_input),
      std::move(new_output),
      p, false,
      std::ranges::size(ishifts),
    };
  }

  inline constexpr auto xreflected() const noexcept -> Rule {
    auto new_input_size = auto{input_size};
    auto new_input = std::views::iota(0u, std::ranges::size(input))
      | std::views::transform([&](UInt i){
          const auto u = fromIndex(i, new_input_size);
          return input.at(toIndex({std::get<2>(input_size) - 1 - u.x, u.y, u.z}, input_size));
      })
      | std::ranges::to<std::vector>();

    auto new_output_size = auto{output_size};
    auto new_output = std::views::iota(0u, std::ranges::size(output))
      | std::views::transform([&](auto i){
          const auto u = fromIndex(i, new_output_size);
          return output.at(toIndex({std::get<2>(output_size) - 1 - u.x, u.y, u.z}, output_size));
      })
      | std::ranges::to<std::vector>();

    return Rule{
      std::move(new_input_size), 
      std::move(new_output_size), 
      std::move(new_input),
      std::move(new_output),
      p, false,
      std::ranges::size(ishifts),
    };
  }

  inline constexpr auto operator==(const Rule&) const noexcept -> bool = default;

  constexpr auto symmetries(bool d2, const symmetry::subgroup& symmetry) const noexcept -> decltype(auto);
};

export template<>
struct std::hash<Rule> {
  std::size_t operator()(const Rule& rule) const noexcept {
    return 0;
  }
};

constexpr auto Rule::symmetries(bool d2, const symmetry::subgroup& symmetry) const noexcept -> decltype(auto) {
  if (d2) return symmetry::squareSymmetries(*this, 
    [](const Rule& r){ return r.zrotated();   },
    [](const Rule& r){ return r.xreflected(); },
    symmetry);

  return symmetry::cubeSymmetries(*this,
    [](const Rule& r){ return r.zrotated();   },
    [](const Rule& r){ return r.yrotated();   },
    [](const Rule& r){ return r.xreflected(); },
    symmetry);
}