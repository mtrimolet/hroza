export module rule;

import std;
import glm;
import frozen;
import stormkit.Core;
import utils;

import grid;

using namespace stormkit;
using symbol = char;

export {

struct Rule {
  Grid<std::optional<std::unordered_set<symbol>>> input;
  Grid<std::optional<symbol>> output;
  double p;

  Rule(Grid<std::optional<std::unordered_set<symbol>>>&& _input, Grid<std::optional<symbol>>&& _output, double _p = 1.0)
    : input{std::move(_input)}, output{std::move(_output)}, p{_p} {}

  inline constexpr auto operator==(const Rule& other) const noexcept -> bool = default;

  static inline constexpr auto parse(
    std::unordered_map<symbol, std::unordered_set<symbol>> unions,
    std::string_view input,
    std::string_view output,
    double p = 1.0
  ) noexcept -> decltype(auto) {
    static constexpr auto IGNORED = '*';

    return Rule{
      Grid<std::optional<std::unordered_set<symbol>>>::parse(input, [&unions](auto&& t) noexcept {
        return t == IGNORED ? std::nullopt
          : unions.contains(t) ? std::optional{unions.at(t)}
          : std::optional{std::unordered_set{t}};
      }),
      Grid<std::optional<symbol>>::parse(output, [](auto&& t) noexcept {
        return t == IGNORED ? std::nullopt : std::optional{t};
      }),
      p
    };
  }

  static inline constexpr auto parse(
    std::string_view input,
    std::string_view output,
    double p = 1.0
  ) noexcept -> decltype(auto) {
    return parse({}, input, output, p);
  }
};

inline constexpr auto xreflected(const Rule& rule) noexcept -> decltype(auto) {
  return Rule{
    xreflected(rule.input),
    xreflected(rule.output),
    rule.p,
  };
}

inline constexpr auto xyrotated(const Rule& rule) noexcept -> decltype(auto) {
  return Rule{
    xyrotated(rule.input),
    xyrotated(rule.output),
    rule.p,
  };
}

inline constexpr auto zyrotated(const Rule& rule) noexcept -> decltype(auto) {
  return Rule{
    zyrotated(rule.input),
    zyrotated(rule.output),
    rule.p,
  };
}
}

template <class T>
const auto square_groups = makeStaticArray<std::function<T(const T&)>>(
  [](const T& rule) noexcept { return auto{rule}; },
  [](const T& rule) noexcept { return xreflected(rule); },
  [](const T& rule) noexcept { return xyrotated(rule); },
  [](const T& rule) noexcept { return xreflected(xyrotated(rule)); },
  [](const T& rule) noexcept { return xyrotated(xyrotated(rule)); },
  [](const T& rule) noexcept { return xreflected(xyrotated(xyrotated(rule))); },
  [](const T& rule) noexcept { return xyrotated(xyrotated(xyrotated(rule))); },
  [](const T& rule) noexcept { return xreflected(xyrotated(xyrotated(xyrotated(rule)))); },
);

constexpr auto square_subgroups =
  frozen::make_unordered_map<frozen::string, std::array<bool, 8>, 6>({
    {"()",     {true, false, false, false, false, false, false, false}},
    {"(x)",    {true,  true, false, false, false, false, false, false}},
    {"(y)",    {true, false, false, false,  true, false, false, false}},
    {"(x)(y)", {true,  true, false, false,  true,  true, false, false}},
    {"(xy+)",  {true, false,  true, false,  true, false,  true, false}},
    {"(xy)",   {true,  true,  true,  true,  true,  true,  true,  true}}
  });

export {
template <>
struct std::hash<Rule> {
  inline constexpr auto operator()(const Rule& rule) const noexcept -> std::size_t {
    auto seed = std::hash<std::dims<3>>{}(rule.input.extents);
    for (auto v : rule.input) {
      seed ^= std::hash<decltype(v)>{}(v);
    }
    for (auto v : rule.output) {
      seed ^= std::hash<decltype(v)>{}(v);
    }
    return seed;
  }
};

inline constexpr auto symmetries(const Rule& rule, std::string_view subgroup = "") noexcept -> decltype(auto) {
  return std::views::zip(square_groups<Rule>, square_subgroups.at(std::empty(subgroup) ? "(xy)" : subgroup))
    | std::views::filter(monadic::get<1>())
    | std::views::transform([&rule](const auto& action) noexcept { return std::get<0>(action)(rule); })
    | std::ranges::to<std::unordered_set>();
}
}
