export module rule;

import std;
import glm;
import stormkit.Core;

import grid;

using namespace stormkit;

export {

template <class T>
struct Rule {
  Grid<std::optional<std::unordered_set<T>>> input;
  Grid<std::optional<T>> output;

  inline constexpr auto operator==(const Rule<T>& other) const noexcept -> bool = default;
};

template <class T>
inline constexpr auto xreflected(const Rule<T>& rule) noexcept -> decltype(auto) {
  return Rule<T>{
    xreflected(rule.input),
    xreflected(rule.output),
  };
}

template <class T>
inline constexpr auto xyrotated(const Rule<T>& rule) noexcept -> decltype(auto) {
  return Rule<T>{
    xyrotated(rule.input),
    xyrotated(rule.output),
  };
}

template <class T>
inline constexpr auto zyrotated(const Rule<T>& rule) noexcept -> decltype(auto) {
  return Rule<T>{
    zyrotated(rule.input),
    zyrotated(rule.output),
  };
}

template <class T>
const auto groups = makeStaticArray<std::function<T(const T&)>>(
  [](const auto& rule) noexcept { return auto{rule}; },
  [](const auto& rule) noexcept { return xyrotated(rule); },
  [](const auto& rule) noexcept { return xyrotated(xyrotated(rule)); },
  [](const auto& rule) noexcept { return xyrotated(xyrotated(xyrotated(rule))); },
  [](const auto& rule) noexcept { return xreflected(rule); },
  [](const auto& rule) noexcept { return xyrotated(xreflected(rule)); },
  [](const auto& rule) noexcept { return xyrotated(xyrotated(xreflected(rule))); },
  [](const auto& rule) noexcept { return xyrotated(xyrotated(xyrotated(xreflected(rule)))); },
);

template <class T>
struct std::hash<std::unordered_set<T>> {
  inline constexpr auto operator()(const std::unordered_set<T>& set) const noexcept -> std::size_t {
    auto seed = std::hash<std::size_t>{}(set.size());
    for (auto i : set) {
      seed ^= std::hash<T>{}(i);
    }
    return seed;
  }
};

template <class T>
struct std::hash<Rule<T>> {
  inline constexpr auto operator()(const Rule<T>& rule) const noexcept -> std::size_t {
    auto seed = std::hash<math::Vector3U>{}(rule.input.size);
    for (auto i : rule.input.values) {
      seed ^= std::hash<std::optional<std::unordered_set<T>>>{}(i);
    }
    for (auto o : rule.output.values) {
      seed ^= std::hash<std::optional<T>>{}(o);
    }
    return seed;
  }
};

template <class T>
inline constexpr auto symmetries(const Rule<T>& rule) noexcept -> decltype(auto) {
  return groups<Rule<T>>
    | std::views::transform([&rule](const auto& action) noexcept { return action(rule); })
    | std::ranges::to<std::unordered_set>();
}

template <class T>
inline constexpr auto match(const Grid<T>& grid, const math::Vector3U& u, const Rule<T>& rule) noexcept -> decltype(auto) {
  return std::ranges::all_of(
    std::views::zip(rule.input.values, std::views::iota(0) 
      | std::views::transform([&u, &rule](auto i) noexcept { return u + fromIndex(i, rule.input.size); })),
    [&grid](const auto& input) noexcept {
      const auto& [value, v] = input;
      return value == std::nullopt
         or std::ranges::find(*value, grid.values.at(toIndex(v, grid.size))) != std::ranges::end(*value);
    }
  );
}

template <class T>
inline constexpr auto changes(const Grid<T>& grid, const math::Vector3U& u, const Rule<T>& rule) noexcept -> decltype(auto) {
  return std::views::zip(rule.output.values, std::views::iota(0) 
      | std::views::transform([&u, &rule](auto i) noexcept { return u + fromIndex(i, rule.output.size); }))
    | std::views::filter([&grid](const auto& output) noexcept {
        const auto& [value, v] = output;
        return  value != std::nullopt
           and *value != grid.values.at(toIndex(v, grid.size));
    })
    | std::views::transform([](auto&& output) noexcept { return std::make_tuple(std::get<1>(output), *std::get<0>(output)); })
    | std::ranges::to<std::vector>();
}

template <class T>
inline constexpr auto apply(Grid<T>& grid, const math::Vector3U& u, const Rule<T>& rule) noexcept -> decltype(auto) {
  return std::views::transform(changes(grid, u, rule), [&grid](const auto& output) noexcept {
    const auto& [v, value] = output;
    grid.values[toIndex(v, grid.size)] = value;
  });
}

template <std::ranges::sized_range A, std::ranges::sized_range B>
    // requires std::ranges::sized_range<A> and std::ranges::sized_range<B>
inline constexpr auto cartesian_product(A&& a, B&& b) noexcept {
  return std::forward<A>(a) 
    | std::views::transform([&b] (const auto& i) noexcept {
        return std::forward<B>(b)
          | std::views::transform([&i] (const auto& j) noexcept { return std::make_pair(i, j); })
          | std::ranges::to<std::vector>();
    }) 
  | std::views::join
  | std::ranges::to<std::vector>();
}

template <class T>
inline constexpr auto matches(const Grid<T>& grid, std::span<const Rule<T>> rules) noexcept -> decltype(auto) {
  const auto g_size = grid.size;
  return rules
    | std::views::transform([&g_size](auto& rule) noexcept {
        return std::views::iota(0u, g_size.z * g_size.y * g_size.x)
          | std::views::transform(bindBack(fromIndex, g_size))
          | std::views::filter(bindBack(inBounds, g_size - rule.input.size))
          | std::views::transform([&rule](auto u) noexcept {
              return std::make_pair(u, rule);
          });
      })
    | std::views::join
    | std::views::filter([&grid](const auto& match) {
        const auto& [u, rule] = match;
        return ::match(grid, u, rule);
    })
    | std::ranges::to<std::vector>();
}

/********* */

template <class T>
inline constexpr auto one(std::span<const Rule<T>> rules, const Grid<T>& grid) noexcept -> decltype(auto) {
  auto matches = ::matches(grid, rules);
  // if (std::ranges::empty(matches)) return std::views::empty<std::tuple<math::Vector3U, T>>;
  if (std::ranges::empty(matches)) return std::vector<std::tuple<math::Vector3U, T>>{};

  static auto rg = std::mt19937{std::random_device{}()};
  std::ranges::shuffle(matches, rg);
  const auto& [u, rule] = matches[0];
  // auto current_grid = auto{grid};
  // apply(current_grid, u, rule);
  return changes(grid, u, rule);
}

template <class T>
struct One {
  std::vector<Rule<T>> rules;
  inline constexpr auto operator()(const Grid<T>& grid) const noexcept -> decltype(auto) {
    return one<T>(rules, grid);
  }
};

template <class T>
inline constexpr auto prl(std::span<const Rule<T>> rules, const Grid<T>& grid) noexcept -> decltype(auto) {
  auto matches = ::matches(grid, rules);
  if (std::ranges::empty(matches)) return std::vector<std::tuple<math::Vector3U, T>>{};

  // auto current_grid = auto{grid};
  // std::ranges::for_each(matches(grid, rules), [&current_grid](const auto& match) noexcept {
  //   const auto& [u, rule] = match;
  //   apply(current_grid, u, rule);
  // });
  return matches | std::views::transform([&grid](auto&& match){
    return changes(grid, std::get<0>(match), std::get<1>(match));
  }) | std::views::join | std::ranges::to<std::vector>();
}

template <class T>
struct Prl {
  std::vector<Rule<T>> rules;
  inline constexpr auto operator()(const Grid<T>& grid) const noexcept -> decltype(auto) {
    return prl<T>(rules, grid);
  }
};

template <class T>
inline constexpr auto all(std::span<const Rule<T>> rules, const Grid<T>& grid) noexcept -> decltype(auto) {
  auto matches = ::matches(grid, rules);
  if (std::ranges::empty(matches)) return std::vector<std::tuple<math::Vector3U, T>>{};

  static auto rg = std::mt19937{std::random_device{}()};
  std::ranges::shuffle(matches, rg);
  const auto cleaned = std::ranges::fold_left(matches, std::vector<typename decltype(matches)::value_type>{}, [](auto a, auto m) noexcept {
    if (std::ranges::find_if(a, [&m](auto i) noexcept { return std::get<0>(i) == std::get<0>(m); }) != std::ranges::end(a))
      return a;
    a.push_back(m);
    return a;
  });
  // auto current_grid = auto{grid};
  // std::ranges::for_each(cleaned, [&current_grid](const auto& m) noexcept {
  //   const auto& [u, rule] = m;
  //   apply(current_grid, u, rule);
  // });
  return cleaned | std::views::transform([&grid](auto&& match){
    return changes(grid, std::get<0>(match), std::get<1>(match));
  }) | std::views::join | std::ranges::to<std::vector>();
}

template <class T>
struct All {
  std::vector<Rule<T>> rules;
  inline constexpr auto operator()(const Grid<T>& grid) const noexcept -> decltype(auto) {
    return all<T>(rules, grid);
  }
};

}