export module rule;

import std;
import glm;
import frozen;
import stormkit.Core;
import utils;
import geometry;

import grid;

using namespace stormkit;
using symbol = char;

export {

struct Rule {
  Grid<std::optional<std::unordered_set<symbol>>> input;
  Grid<std::optional<symbol>> output;
  double p;

  Rule(Grid<std::optional<std::unordered_set<symbol>>>&& _input, Grid<std::optional<symbol>>&& _output, double _p = 1.0)
    : input{std::move(_input)}, output{std::move(_output)}, p{_p} {}

  inline constexpr auto operator==(const Rule& other) const noexcept -> bool = default;

  static inline constexpr auto parse(
    std::unordered_map<symbol, std::unordered_set<symbol>> unions,
    std::string_view input,
    std::string_view output,
    double p = 1.0
  ) noexcept -> decltype(auto) {
    static constexpr auto IGNORED = '*';

    return Rule{
      Grid<std::optional<std::unordered_set<symbol>>>::parse(input, [&unions](auto&& t) noexcept {
        return t == IGNORED ? std::nullopt
          : unions.contains(t) ? std::optional{unions.at(t)}
          : std::optional{std::unordered_set{t}};
      }),
      Grid<std::optional<symbol>>::parse(output, [](auto&& t) static noexcept {
        return t == IGNORED ? std::nullopt : std::optional{t};
      }),
      p
    };
  }

  static inline constexpr auto parse(
    std::string_view input,
    std::string_view output,
    double p = 1.0
  ) noexcept -> decltype(auto) {
    return parse({}, input, output, p);
  }

  inline constexpr auto xreflected() const noexcept -> decltype(auto) {
    return Rule{
      input.xreflected(),
      output.xreflected(),
      p,
    };
  }

  inline constexpr auto xyrotated() const noexcept -> decltype(auto) {
    return Rule{
      input.xyrotated(),
      output.xyrotated(),
      p,
    };
  }

  inline constexpr auto zyrotated() const noexcept -> decltype(auto) {
    return Rule{
      input.zyrotated(),
      output.zyrotated(),
      p,
    };
  }

  /** Provides the area of locations at which this rule would update u */
  inline constexpr auto neighborhood(const math::Vector3U& g_sentinel, const math::Vector3U& u) const noexcept -> decltype(auto) {
    const auto neigh_size = toSentinel(output.extents);
    const auto neigh_shift = -static_cast<math::Vector3I>(neigh_size - math::Vector3U{1u, 1u, 1u});
    const auto neigh = Area<3, Int>{neigh_shift, neigh_size} + static_cast<math::Vector3I>(u);
    return static_cast<Area3U>(Area<3, Int>{g_sentinel}.meet(neigh));
  }
};
}

const auto square_groups = makeStaticArray<std::function<Rule(const Rule&)>>(
  [](auto&& rule) static noexcept { return auto{rule}; },
  [](auto&& rule) static noexcept { return rule.xreflected(); },
  [](auto&& rule) static noexcept { return rule.xyrotated(); },
  [](auto&& rule) static noexcept { return rule.xyrotated().xreflected(); },
  [](auto&& rule) static noexcept { return rule.xyrotated().xyrotated(); },
  [](auto&& rule) static noexcept { return rule.xyrotated().xyrotated().xreflected(); },
  [](auto&& rule) static noexcept { return rule.xyrotated().xyrotated().xyrotated(); },
  [](auto&& rule) static noexcept { return rule.xyrotated().xyrotated().xyrotated().xreflected(); }
);

constexpr auto square_subgroups =
  frozen::make_unordered_map<frozen::string, std::array<bool, 8>, 6>({
    {"()",     {true, false, false, false, false, false, false, false}},
    {"(x)",    {true,  true, false, false, false, false, false, false}},
    {"(y)",    {true, false, false, false,  true, false, false, false}},
    {"(x)(y)", {true,  true, false, false,  true,  true, false, false}},
    {"(xy+)",  {true, false,  true, false,  true, false,  true, false}},
    {"(xy)",   {true,  true,  true,  true,  true,  true,  true,  true}}
  });

export {
template <>
struct std::hash<Rule> {
  inline constexpr auto operator()(const Rule& rule) const noexcept -> std::size_t {
    auto seed = std::hash<std::dims<3>>{}(rule.input.extents);
    for (auto&& v : rule.input) {
      seed ^= std::hash<std::remove_cvref_t<decltype(v)>>{}(v);
    }
    for (auto&& v : rule.output) {
      seed ^= std::hash<std::remove_cvref_t<decltype(v)>>{}(v);
    }
    return seed;
  }
};

inline constexpr auto symmetries(const Rule& rule, std::string_view subgroup = "") noexcept -> decltype(auto) {
  return std::views::zip(square_groups, square_subgroups.at(std::empty(subgroup) ? "(xy)" : subgroup))
    | std::views::filter(monadic::get<1>())
    | std::views::transform([&rule](auto&& action) noexcept { return std::get<0>(action)(rule); })
    | std::ranges::to<std::unordered_set>();
}
}
