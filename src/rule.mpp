export module rule;

import std;
import glm;
import stormkit.Core;
import utils;

import grid;

using namespace stormkit;

export {

template <class T>
struct Rule {
  Grid<std::optional<std::unordered_set<T>>> input;
  Grid<std::optional<T>> output;

  inline constexpr auto operator==(const Rule<T>& other) const noexcept -> bool = default;

  static inline constexpr auto parse(T Zsep, T Ysep, T Ignored, std::basic_string_view<T> _input, std::basic_string_view<T> _output) noexcept -> decltype(auto) {
    auto input = Grid<T>::parse(Zsep, Ysep, _input);
    auto output = Grid<T>::parse(Zsep, Ysep, _output);

    return Rule<T>{
      input
        | std::views::transform([Ignored](const T& t) noexcept {
            return t == Ignored ? std::nullopt : std::optional{std::unordered_set{t}};
        })
        | std::ranges::to<Grid<std::optional<std::unordered_set<T>>>>(input.size),
      output
        | std::views::transform([Ignored](const T& t) noexcept {
            return t == Ignored ? std::nullopt : std::optional{t};
        })
        | std::ranges::to<Grid<std::optional<T>>>(output.size),
    };
  }
};

template <class T>
inline constexpr auto xreflected(const Rule<T>& rule) noexcept -> decltype(auto) {
  return Rule<T>{
    xreflected(rule.input),
    xreflected(rule.output),
  };
}

template <class T>
inline constexpr auto xyrotated(const Rule<T>& rule) noexcept -> decltype(auto) {
  return Rule<T>{
    xyrotated(rule.input),
    xyrotated(rule.output),
  };
}

template <class T>
inline constexpr auto zyrotated(const Rule<T>& rule) noexcept -> decltype(auto) {
  return Rule<T>{
    zyrotated(rule.input),
    zyrotated(rule.output),
  };
}

template <class T>
const auto groups = makeStaticArray<std::function<T(const T&)>>(
  [](const T& rule) noexcept { return auto{rule}; },
  [](const T& rule) noexcept { return xyrotated(rule); },
  [](const T& rule) noexcept { return xyrotated(xyrotated(rule)); },
  [](const T& rule) noexcept { return xyrotated(xyrotated(xyrotated(rule))); },
  [](const T& rule) noexcept { return xreflected(rule); },
  [](const T& rule) noexcept { return xyrotated(xreflected(rule)); },
  [](const T& rule) noexcept { return xyrotated(xyrotated(xreflected(rule))); },
  [](const T& rule) noexcept { return xyrotated(xyrotated(xyrotated(xreflected(rule)))); },
);

template <class T>
struct std::hash<Rule<T>> {
  inline constexpr auto operator()(const Rule<T>& rule) const noexcept -> std::size_t {
    auto seed = std::hash<math::Vector3U>{}(rule.input.size);
    for (auto v : rule.input) {
      seed ^= std::hash<std::optional<std::unordered_set<T>>>{}(v);
    }
    for (auto v : rule.output) {
      seed ^= std::hash<std::optional<T>>{}(v);
    }
    return seed;
  }
};

template <class T>
inline constexpr auto symmetries(const Rule<T>& rule) noexcept -> decltype(auto) {
  return groups<Rule<T>>
    | std::views::transform([&rule](const auto& action) noexcept { return action(rule); })
    | std::ranges::to<std::unordered_set>();
}

template <class T>
struct Match {
  math::Vector3U u;
  Rule<T> rule;
};

template <class T>
inline constexpr auto match(const Grid<T>& grid, const Match<T>& match) noexcept -> bool {
  return std::ranges::all_of(
    std::views::zip(
      locations(match.rule.input.size) | std::views::transform([&match](auto u) noexcept { return match.u + u; }),
      match.rule.input,
    ),
    [&grid](const auto& input) noexcept {
      const auto& [v, value] = input;
      return value == std::nullopt
         or std::ranges::find(*value, grid.at(v)) != std::ranges::end(*value);
    }
  );
}

template <class T>
inline constexpr auto changes(const Grid<T>& grid, const Match<T>& match) noexcept -> decltype(auto) {
  return std::views::zip(
    locations(match.rule.output.size) | std::views::transform([&match](auto u) noexcept { return match.u + u; }),
    match.rule.output,
  )
    | std::views::filter([&grid](const auto& output) noexcept {
        const auto& [v, value] = output;
        return  value != std::nullopt
           and *value != grid.at(v);
    })
    | std::views::transform([](auto&& output) noexcept {
        return Change<T>{std::get<0>(output), *std::get<1>(output)};
      })
    | std::ranges::to<std::vector>();
}

template <class T>
inline constexpr auto matches(const Grid<T>& grid, std::span<const Rule<T>> rules, std::span<const Change<T>> changes) noexcept -> decltype(auto) {
  const auto locations = std::ranges::empty(changes)
    ? ::locations(grid.size) | std::ranges::to<std::vector>()
    : changes | std::views::transform(&Change<T>::u) | std::ranges::to<std::vector>();

  return rules
    | std::views::transform([&locations, &g_size{grid.size}](const auto& rule) noexcept {
        return locations
          | std::views::filter(bindBack(inBounds, g_size - rule.input.size))
          | std::views::transform([&rule](auto u) noexcept {
              return Match<T>{u, rule};
          });
      })
    | std::views::join
    | std::views::filter(bindFront(::match<T>, grid))
    | std::ranges::to<std::vector>();
}

/********* */

template <class T>
inline constexpr auto one(std::span<const Rule<T>> rules, const Grid<T>& grid, std::span<const Change<T>> changes) noexcept -> decltype(auto) {
  auto matches = ::matches<T>(grid, rules, changes);

  static auto rg = std::mt19937{std::random_device{}()};
  std::ranges::shuffle(matches, rg);

  return matches
    | std::views::take(1)
    | std::views::transform(bindFront(::changes<T>, grid))
    | std::views::join
    | std::ranges::to<std::vector>();
}

template <class T>
struct One {
  std::vector<Rule<T>> rules;

  inline constexpr auto operator()(const TracedGrid<T>& grid) noexcept -> decltype(auto) {
    // const auto now = std::ranges::cend(grid.history);
    // const auto changes =
    //   last_matched == std::nullopt ? std::vector<Change<T>>{} :
    //   std::ranges::subrange(*last_matched, now) | std::ranges::to<std::vector>();

    auto res = one<T>(rules, grid, {});
    // last_matched = std::ranges::empty(res) ? std::nullopt : std::optional{now};
    return res;
  }
};

template <class T>
inline constexpr auto prl(std::span<const Rule<T>> rules, const Grid<T>& grid, std::span<const Change<T>> changes) noexcept -> decltype(auto) {
  return ::matches<T>(grid, rules, changes)
    | std::views::transform(bindFront(::changes<T>, grid)) 
    | std::views::join 
    | std::ranges::to<std::vector>();
}

template <class T>
struct Prl {
  std::vector<Rule<T>> rules;
  // std::optional<typename std::vector<Change<T>>::const_iterator> last_matched;

  // Prl() noexcept = default;
  // Prl(std::vector<Rule<T>>&& _rules) noexcept
  //   : rules{_rules}, last_matched{} {}

  inline constexpr auto operator()(const TracedGrid<T>& grid) noexcept -> decltype(auto) {
    // const auto now = std::ranges::cend(grid.history);
    // const auto changes =
    //   last_matched == std::nullopt ? std::vector<Change<T>>{} :
    //   std::ranges::subrange(*last_matched, now) | std::ranges::to<std::vector>();

    auto res = prl<T>(rules, grid, {});
    // last_matched = std::ranges::empty(res) ? std::nullopt : std::optional{now};
    return res;
  }
};

template <class T>
inline constexpr auto all(std::span<const Rule<T>> rules, const Grid<T>& grid, std::span<const Change<T>> changes) noexcept -> decltype(auto) {
  auto matches = ::matches<T>(grid, rules, changes);

  static auto rg = std::mt19937{std::random_device{}()};
  std::ranges::shuffle(matches, rg);

  auto cleaned = std::vector<Change<T>>{};
  std::ranges::for_each(matches
    | std::views::transform(bindFront(::changes<T>, grid)),
    [&cleaned](auto&& changes) noexcept {
      if (std::ranges::find_first_of(
        cleaned, changes,
        std::ranges::equal_to{},
        &Change<T>::u, &Change<T>::u
      ) == std::ranges::end(cleaned))
        cleaned.append_range(changes);
    }
  );

  return cleaned;
}

template <class T>
struct All {
  std::vector<Rule<T>> rules;
  // std::optional<typename std::vector<Change<T>>::const_iterator> last_matched;

  // All() noexcept = default;
  // All(std::vector<Rule<T>>&& _rules) noexcept
  //   : rules{_rules}, last_matched{} {}

  inline constexpr auto operator()(const TracedGrid<T>& grid) noexcept -> decltype(auto) {
    // const auto now = std::ranges::cend(grid.history);
    // const auto changes =
    //   last_matched == std::nullopt ? std::vector<Change<T>>{} :
    //   std::ranges::subrange(*last_matched, now) | std::ranges::to<std::vector>();

    auto res = all<T>(rules, grid, {});
    // last_matched = std::ranges::empty(res) ? std::nullopt : std::optional{now};
    return res;
  }
};

}