export module interpreter;

import std;
import stormkit.Core;
import pugixml;
import grid;
import node;
import model;
import symmetry;
import utils;
import xml_tree_walker;
import frozen;

using namespace stormkit;
using namespace std::literals;

export struct Interpreter {
public:
  Grid grid;
  BranchNode root;

  static inline constexpr auto parse(const pugi::xml_node &xroot, Size&& size) noexcept -> decltype(auto) {
    auto grid = Grid::parse(xroot, std::move(size));

    std::println("nodes:");

    const auto symmetry = symmetry::getSymmetry(
        std::get<0>(grid.size) == 1, xroot.attribute("symmetry").as_string());

    auto node = Node::parse(xroot, grid, symmetry);
    
    std::println();

    return Interpreter{std::move(grid), std::move(node)};
  }

  inline auto run(UInt seed) noexcept -> std::generator<const Grid&> {
    auto rg = std::mt19937{seed};
    auto changes = std::vector<math::Vector3I>{};

    grid.reset();
    co_yield grid;

    for (const auto success : root.execute(grid, changes, std::ranges::end(changes), rg))
      if (success) co_yield grid;
  }
};