export module interpreter;

import std;
import stormkit.Core;
import pugixml;
import grid;
import node;
import model;
import symmetry;
import utils;
import xml_tree_walker;
import frozen;

using namespace stormkit;
using namespace std::literals;


export struct Interpreter {
  struct Node : ::Node<bool,
    OneNode,
    AllNode,
    ParallelNode,
    MarkovNode<Node>,
    SequenceNode<Node>
  > {};

  struct BranchNode : ::BranchNode<bool,
    MarkovNode<Node>,
    SequenceNode<Node>
  > {};

public:
  Grid grid;
  BranchNode root;

  static inline constexpr auto parse(const pugi::xml_node &xroot, auto&& size) noexcept -> decltype(auto) {
    auto grid = Grid::parse(xroot, size);
    auto root = Node::parse(xroot, grid, ""s);

    return Interpreter{grid, root.visit(Visitor{
      [](BranchNode& n) constexpr { return std::move(n); },
      [](auto& n) constexpr { return MarkovNode<Node>{{Node{std::move(n)}}}; }
    })};
  }

  inline auto run(UInt seed) noexcept -> std::generator<std::tuple<const Grid&, std::vector<math::Vector3I>>> {
    auto rg = std::mt19937{seed};
    auto changes = std::vector<math::Vector3I>{};

    grid.reset();
    co_yield std::make_tuple(grid, changes);

    for (const auto success : root.execute(grid, changes, rg)) {
      if (success) {
        co_yield std::make_tuple(grid, changes);
        changes.clear();
      }
    }
  }
};