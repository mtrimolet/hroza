export module observationengine;

import std;
import glm;
import stormkit.core;
import utils;
import geometry;

import grid;
import rewriterule;
import forceengine;

using namespace stormkit;

export {

struct Observation {
  std::optional<char>      from;
  std::unordered_set<char> to;
};

using Observations = std::unordered_map<char, Observation>;

using Future = Grid<std::optional<std::unordered_set<char>>>;
auto future(Grid<char>::ConstView grid, Observations obs) noexcept -> std::pair<std::vector<Change<char>>, Future>;

struct ObservationEngine : ForceEngine {
  Observations observations;
  
  Future future;

  inline constexpr ObservationEngine() noexcept = default;

  inline constexpr ObservationEngine(double temperature, Observations&& _observations) noexcept
  : ForceEngine{temperature}, observations{std::move(_observations)}, future{} {}

  auto updateFuture(Grid<char>::ConstView grid, std::span<const RewriteRule> rules) noexcept -> std::vector<Change<char>>;
};

}
