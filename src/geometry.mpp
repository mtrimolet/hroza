export module geometry;

import std;
import glm;
import stormkit.Core;

using namespace stormkit;

export {

//////////////////////////////////
// Enrichment of math::Vector3U //
//////////////////////////////////
namespace geometry {

// glm only provides geometry functions for vectors of floating-point number types

template <meta::IsArithmetic T>
inline constexpr auto dot(const math::Vector<3, T>& a, const math::Vector<3, T>& b) noexcept -> decltype(auto) {
  // this will silently overflow
  return a.x * b.x
       + a.y * b.y
       + a.z * b.z;
}

// template <RangeExtent E>
inline constexpr auto reflect(const math::Vector3I& i, const math::Vector3I& n) noexcept -> decltype(auto) {
  // this will silently overflow
  return i - 2 * dot(n, i) * n;
}

// // template <RangeExtent E>
// inline constexpr auto modreflect(const math::Vector3U& i, const math::Vector3U& n, const math::Vector3U& size) noexcept -> decltype(auto) {
//   // this will silently overflow
//   return static_cast<math::Vector3U>(static_cast<math::Vector3I>(ob) + reflect(static_cast<math::Vector3I>(i), n)) % size;
// }

// We're using the same component-wise behavior as standard glm functions (see comparators below)

template <meta::IsArithmetic T>
inline constexpr auto min(const math::Vector<3, T>& a, const math::Vector<3, T>& b) noexcept -> decltype(auto) {
  return math::Vector3U{
    std::min(a.x, b.x),
    std::min(a.y, b.y),
    std::min(a.z, b.z),
  };
}
}

///////////////////////////////////
// Comparators of math::Vector3U //
///////////////////////////////////

template <RangeExtent E, meta::IsArithmetic T>
struct std::equal_to<math::Vector<E, T>> {
  inline constexpr auto operator()(const math::Vector<E, T>& a, const math::Vector<E, T>& b) const noexcept -> bool {
    return math::all(math::equal(a, b));
  }
};

// maybe implement partial/weak/string ordering(s)

/* Memo

namespace math {
  std::function<math::Vector<E, bool>(math::Vector<E, T>, math::Vector<E, T>)>
    lessThan, lessThanEqual, greaterThan, greaterThanEqual;
}

extern math::Vector<E, T> a,b;

assert(
      math::lessThan(a, b)
  ==  math::greaterThan(b, a)
  and
      math::lessThanEqual(a, b)
  ==  math::greaterThanEqual(b, a)
);

assert(
      not math::lessThan(a, b)
  ==  math::greaterThanEqual(a, b)
  and
      not math::lessThanEqual(a, b)
  ==  math::greaterThan(a, b)
);

extern math::Vector<E, bool> c;

assert(
      not math::all(c)
  ==  math::any(not c)
);

*/

template <RangeExtent E, meta::IsArithmetic T>
struct HyperRectangle {
  using Position = math::Vector<E, T>;
  using Size = math::Vector<E, std::make_unsigned_t<T>>;

  Position u;
  Size size;

  inline constexpr HyperRectangle() noexcept = default;

  inline constexpr HyperRectangle(Position _u, Size _size) noexcept
    : u{_u}, size{_size} {}

  template <meta::IsArithmetic T2>
  inline constexpr HyperRectangle(const HyperRectangle<E, T2>& other) noexcept
    : HyperRectangle{other.u, other.size} {}

  inline constexpr auto outerbound() const noexcept -> decltype(auto) {
    return u + static_cast<Position>(size);
  }

  inline constexpr auto contains(const Position& v) const noexcept -> decltype(auto) {
    return math::all(math::lessThanEqual(u, v))
       and math::all(math::lessThan(v, outerbound()));
  }

  inline constexpr auto operator+(const HyperRectangle& other) const noexcept -> decltype(auto) {
    return HyperRectangle{u + other.u, size + other.size};
  }

  inline constexpr auto operator-(const HyperRectangle& other) const noexcept -> decltype(auto) {
    return HyperRectangle{u - other.u, size - other.size};
  }

  inline constexpr auto operator+(const Position& shift) const noexcept -> decltype(auto) {
    return HyperRectangle{u + shift, size};
  }

  inline constexpr auto operator-(const Position& shift) const noexcept -> decltype(auto) {
    return HyperRectangle{u - shift, size};
  }

  inline constexpr auto operator*(T r) const noexcept -> decltype(auto) {
    if constexpr (std::is_same_v<Position, Size>)
      return HyperRectangle{u * r, size * r};
    else
      return HyperRectangle{u * r, size * std::abs(r)};
  }

  inline constexpr auto operator/(T r) const noexcept -> decltype(auto) {
    if constexpr (std::is_same_v<Position, Size>)
      return HyperRectangle{u * r, size / r};
    else
      return HyperRectangle{u / r, size / std::abs(r)};
  }

  inline constexpr auto overlaps(const HyperRectangle& other) const noexcept -> decltype(auto) {
    return math::all(math::lessThan(      u, other.outerbound()))
       and math::all(math::lessThan(other.u,       outerbound()));
  }

  inline constexpr auto meet(const HyperRectangle& other) const noexcept -> decltype(auto) {
    if (not overlaps(other)) return HyperRectangle{};
    auto&& u    = max(this->u, other.u);
    auto&& size = min(outerbound(), other.outerbound()) - u;
    return HyperRectangle{std::move(u), std::move(size)};
  }

  inline constexpr auto umeet(const HyperRectangle<E, std::make_unsigned_t<T>>& other) const noexcept -> decltype(auto) 
  requires (not std::is_same_v<Position, Size>) {
    return static_cast<HyperRectangle<E, std::make_unsigned_t<T>>>(
      meet(static_cast<HyperRectangle<E, T>>(other))
    );
  }

  inline constexpr auto join(const HyperRectangle& other) const noexcept -> decltype(auto) {
    auto&& u    = min(this->u, other.u);
    auto&& size = max(outerbound(), other.outerbound()) - u;
    return HyperRectangle{std::move(u), std::move(size)};
  }
};

using Area3U = HyperRectangle<3, UInt32>;
using Area3I = HyperRectangle<3, Int32>;

inline constexpr auto xreflected(const Area3U& a) noexcept -> decltype(auto) {
  auto&& size = auto{a.size};
  /* u -> { size.x - u.x - 1u, u.y, u.z } */
  return Area3U{a.u, std::move(size)};
}

inline constexpr auto xyrotated(const Area3U& a) noexcept -> decltype(auto) {
  auto&& size = math::Vector3U{
    a.size.y,
    a.size.x,
    a.size.z
  };
  /* u -> { u.y, size.x - u.x - 1, u.z } */
  return Area3U{a.u, std::move(size)};
}

inline constexpr auto zyrotated(const Area3U& a) noexcept -> decltype(auto) {
  auto&& size = math::Vector3U{
    a.size.x,
    a.size.z,
    a.size.y
  };
  /* u -> { u.x, size.z - u.z - 1, u.y } */
  return Area3U{a.u, std::move(size)};
}

}