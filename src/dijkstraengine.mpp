export module dijkstraengine;

import std;

import grid;
import forceengine;

export {

/** Produce distance potential through substrate */
struct DijkstraField {
  bool recompute, essential, inversed;
  std::unordered_set<char> substrate, zero;

  auto potential(const Grid<char>& grid) const noexcept -> Potential;
};

using DijkstraFields = std::unordered_map<char, DijkstraField>;

struct DijkstraEngine : ForceEngine {
  DijkstraFields fields;

  inline constexpr DijkstraEngine() noexcept = default;

  inline constexpr DijkstraEngine(double temperature, DijkstraFields&& _fields) noexcept
  : ForceEngine{temperature, {}}, fields{std::move(_fields)}
  {}

  auto updatePotentials(const Grid<char>& grid) noexcept -> void;

  inline constexpr auto essential_missing() const noexcept -> decltype(auto) {
    return std::ranges::any_of(fields, [&](auto&& _f) noexcept {
      auto&& [c, f] = _f;
      return f.essential and not potentials.contains(c);
    });
  }
};

}
