export module dijkstraengine;

import std;
import glm;
import stormkit.Core;
import utils;
import geometry;

import grid;
import rewriterule;
import match;
import rewriteengine;
import forceengine;

using namespace stormkit;
using symbol = char;

export
/** Produce distance potential through substrate */
struct DijkstraField {
  bool recompute, essential, inversed;
  std::optional<std::unordered_set<symbol>> substrate, zero;

  static inline constexpr auto parse(
    bool recompute, bool essential,
    std::string_view on,
    std::string_view from,
    std::string_view to
  ) noexcept -> decltype(auto) {
    static constexpr auto IGNORED = '*';
    auto&& zero = std::ranges::empty(from) ? to : from;
    return DijkstraField{
      recompute, essential,
      not std::ranges::empty(from),
      on == std::format("{}", IGNORED) ? std::nullopt : std::optional{on | std::ranges::to<std::unordered_set>()},
      zero == std::format("{}", IGNORED) ? std::nullopt : std::optional{zero | std::ranges::to<std::unordered_set>()}
    };
  }

  inline constexpr auto potential(Grid<symbol>::ConstView grid) const noexcept -> decltype(auto) {
    auto potential = Potential{grid.extents(), inversed ? -std::numeric_limits<double>::infinity() : std::numeric_limits<double>::infinity()};
    auto&& p_area = potential.area();
    propagate(
      mdiota(p_area)
        | std::views::filter([&zero{zero}, &grid](auto&& u) noexcept {
            return zero == std::nullopt
                or zero->contains(grid[u.z, u.y, u.x]);
        })
        | std::views::transform([&potential](auto&& u) noexcept {
            potential[u] = 0.0;
            return std::make_pair(u, 0.0);
        }),
      [&](auto&& front) noexcept {
        static constexpr auto neigh_size = 3u * math::Vector3U{1, 1, 1};
        static constexpr auto neigh_shift = -static_cast<math::Vector3I>(neigh_size) / 2;
        static constexpr auto neigh = Area3I{neigh_shift, neigh_size};

        auto&& [u, p] = front;
        auto&& new_us = (neigh + u).umeet(p_area);
        auto&& new_p = inversed ? p - 1.0 : p + 1.0;
        return mdiota(new_us)
          | std::views::filter([&, new_p](auto&& n) noexcept {
              return (inversed ? potential[n] < new_p : potential[n] > new_p)
                 and (substrate == std::nullopt
                   or substrate->contains(grid[n.z, n.y, n.x])
                 );
          })
          | std::views::transform([&, new_p](auto&& n) noexcept {
              potential[n] = new_p;
              return std::make_pair(n, new_p);
          });
      }
    );

    return potential;
  }
};

/** Is this Metropolis-Hastings ? Monte-Carlo ?
  * It's definitely not Simulated Annealing since we're not changing the temperature.
  * What's my energy, "potential" ?? -- yes, or more precisely "- potential", remember : E = KE - PE
**/
export
struct DijkstraEngine {
  double temperature;
  std::unordered_map<symbol, DijkstraField> fields;
  std::unordered_map<symbol, Potential> potentials;

  inline constexpr auto updatePotentials(Grid<symbol>::ConstView grid) noexcept -> decltype(auto) {
// #pragma clang diagnostic push
// #pragma clang diagnostic ignored "-Wunused-result"
    std::ranges::for_each(
      fields | std::views::filter([&potentials{potentials}](auto&& _tuple) noexcept {
        auto&& [c, f] = _tuple;
        return not potentials.contains(c)
            or f.recompute;
      }),
      [&potentials{potentials}, potential{bindBack(&DijkstraField::potential, std::move(grid))}]
      (auto&& _tuple) noexcept {
        auto&& [c, f] = _tuple;
        auto&& p = potential(f);
        if (std::ranges::all_of(p, [](auto&& p) static noexcept {
          return std::abs(p) == std::numeric_limits<double>::infinity();
        })) {
          potentials.erase(c);
          return;
        }
        potentials.insert_or_assign(c, std::move(p));
      }
    );
// #pragma clang diagnostic pop
  }

  /** Sum of differences of potential caused by applying match */
  inline constexpr auto gain(Grid<symbol>::ConstView grid, const Match& match) noexcept -> decltype(auto) {
    return std::ranges::fold_left(
      std::views::zip(
        mdiota(match.area()),
        match.rule.output
      )
      | std::views::filter([&grid](auto&& _o) noexcept {
          auto&& [u, o] = _o;
          // locations where value is preserved, their difference is 0
          return o != std::nullopt and *o != grid[u.z, u.y, u.x];
      })
      | std::views::transform([&grid, &potentials{potentials}] (auto&& _o) noexcept {
          auto&& [u, o] = _o;

          auto&& new_value = *o;
          auto&& old_value = grid[u.z, u.y, u.x];

          auto&&
            new_p = potentials.contains(new_value) ? potentials.at(new_value)[u] : 0.0,
            old_p = potentials.contains(old_value) ? potentials.at(old_value)[u] : 0.0;

          if (std::abs(old_p) == std::numeric_limits<double>::infinity())
            return new_p + 1.0;
          return new_p - old_p;
      }),
      0.0, std::plus{}
    );
  }

  inline constexpr auto essential_missing() const noexcept -> decltype(auto) {
    return std::ranges::any_of(fields, [&potentials{potentials}](auto&& _f) noexcept {
      auto&& [c, f] = _f;
      return f.essential and not potentials.contains(c);
    });
  }

  /** Sort by (inverse) heated potential gain in non-descending order */
  inline constexpr auto applyPotentials(Grid<symbol>::ConstView grid, std::span<Match> matches) noexcept -> decltype(auto) {
    static auto rg = std::mt19937{std::random_device{}()};
    if (std::ranges::empty(fields)) {
      std::ranges::shuffle(matches, rg);
      return;
    }

    auto&& values = std::views::zip(
      matches, matches
        | std::views::transform(bindFront(&DijkstraEngine::gain, this, grid))
        | std::views::transform([&temperature{temperature}](auto&& g) noexcept {
            static auto prob = std::uniform_real_distribution<>{};
            auto&& u = prob(rg);

            return temperature > 0.0
              ? std::pow(u, std::exp(g / temperature))   // `e^(dE/T)`
              : -g + 0.001 * u;                          // what's this arbitrary function used for the cold configuration ?;
        })
    )
      | std::ranges::to<std::unordered_map<Match, double>>();

    ::sort(matches, {}, [&values](auto&& m) noexcept {
      auto&& v = values.at(m);
      // ensures(v == 0.0 or std::isnormal(v), "anormal score value in dijkstra inference");
      return v;
    });
  }
};
