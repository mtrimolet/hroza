export module match;

import std;
import stormkit.core;
import geometry;

import grid;
import rewriterule;

using namespace stormkit;

export
struct Match {
  static constexpr auto IGNORED_SYMBOL = '*';
  
  math::Vector3U u;
  RewriteRule rule;

  inline constexpr auto operator==(const Match& other) const noexcept -> bool = default;

  inline constexpr auto area() const noexcept -> decltype(auto) {
    return rule.area() + u;
  }

  inline constexpr auto match(Grid<char> grid, const RewriteRule::Unions& unions) const noexcept -> decltype(auto) {
    return std::ranges::all_of(
      std::views::zip(mdiota(area()), rule.input),
      [&](auto&& input) noexcept {
        auto&& [u, i] = input;
        return unions.contains(grid[u])
           and std::ranges::all_of(
             unions.at(grid[u]),
             [_union = unions.at(i)](auto&& c) noexcept {
               return std::ranges::contains(_union, c);
             }
           );
      }
    );
  }

  inline constexpr auto changes(Grid<char> grid) const noexcept -> decltype(auto) {
    return std::views::zip(mdiota(area()), rule.output)
      | std::views::filter([&](auto&& output) noexcept {
          auto&& [u, value] = output;
          return value != IGNORED_SYMBOL
             and value != grid[u];
      })
      | std::views::transform([](auto&& uo) static noexcept {
          return Change{std::get<0>(uo), std::get<1>(uo)};
      });
  }
};

export template <>
struct std::hash<Match> {
  inline constexpr auto operator()(const Match& match) const noexcept -> std::size_t {
    return std::hash<math::Vector3U>{}(match.u)
         ^ std::hash<RewriteRule>{}(match.rule);
  }
};
