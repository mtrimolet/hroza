export module searchengine;

import std;
import stormkit.core;

import grid;
import rewriterule;
import forceengine;
import observationengine;

using namespace stormkit;

export {

auto forward(Grid<char>::ConstView grid, std::span<const RewriteRule> rules) noexcept -> Potentials;

struct SearchEngine {
  std::optional<UInt> limit;
  double              depthCoefficient;

  Observations observations;

  Future future;
  std::queue<std::vector<Change<char>>> trajectory;

  inline constexpr SearchEngine() noexcept = default;

  inline constexpr SearchEngine(
    std::optional<UInt>&& _limit,
    double                _depthCoefficient,
    Observations&&        _observations
  ) noexcept
  : limit{std::move(_limit)},
    depthCoefficient{_depthCoefficient},
    observations{std::move(_observations)}
  {}

  auto updateFuture(Grid<char>::ConstView grid, std::span<const RewriteRule> rules) noexcept -> std::vector<Change<char>>;

  inline constexpr auto followTrajectory() noexcept -> decltype(auto) {
    if (std::ranges::empty(trajectory)) {
      return std::vector<Change<char>>{};
    }
    auto changes = trajectory.front();
    trajectory.pop();
    return changes;
  }
};

}
