export module searchengine;

import std;
import glm;
import stormkit.Core;
import utils;
import geometry;

import grid;
import rewriterule;
import forceengine;

using namespace stormkit;
using symbol = char;

export struct Observation {
  std::optional<symbol> from;
  std::unordered_set<symbol> to;
};

export
inline constexpr auto future(std::unordered_map<symbol, Observation> obs, Grid<symbol>::ConstView grid) noexcept -> decltype(auto) {
  auto changes = std::vector<Change<symbol>>{};
  auto f = mdiota(grid.extents())
    | std::views::transform([&obs, &changes, &grid](auto&& u) noexcept {
        auto&& c = grid[u.z, u.y, u.x];
        if (not obs.contains(c)) return std::optional<std::unordered_set<symbol>>{};
        auto&& o = obs.at(c);
        if (o.from) changes.emplace_back(u, *o.from);
        return std::optional{o.to};
    })
    | std::ranges::to<Grid<std::optional<std::unordered_set<symbol>>>>(grid.extents());

  return std::make_pair(std::move(changes), std::move(f));
}

export
inline constexpr auto forward(
  Grid<symbol>::ConstView grid,
  std::span<const RewriteRule> rules
) noexcept -> decltype(auto) {
  auto potentials = std::unordered_map<symbol, Potential>{};

  propagate(
    mdiota(grid.extents())
      | std::views::transform([&grid, &potentials](auto&& u) noexcept {
          auto&& c = grid[u.z, u.y, u.x];
          potentials.try_emplace(c, grid.extents(), std::numeric_limits<double>::infinity());
          potentials.at(c)[u] = 0.0;
          return std::make_pair(c, u);
      }),
    [&potentials, &rules](auto&& front) noexcept {
      auto&& [c, u] = front;
      auto&& potential = potentials.at(c);
      auto&& p_area = potential.area();

      auto&& p = potential[u];
      auto&& new_p = p + 1.0;
  
      return rules 
        | std::views::transform([&, p_area](auto&& rule) noexcept {
            auto&& neigh = rule.backward_neighborhood();
            auto&& zone = (neigh + u).umeet(p_area);
            return mdiota(zone)
              | std::views::transform([&rule](auto&& u) noexcept {
                  return std::views::zip(
                    mdiota(rule.area() + u),
                    rule.input,
                    rule.output
                  );
              })
              | std::views::filter([&potentials, p](auto&& _uios) noexcept {
                  return std::ranges::none_of(
                    _uios | std::views::filter([](auto&& _uio) static noexcept {
                      auto&& [u, i, o] = _uio;
                      return i != std::nullopt;
                    }),
                    bindBack(std::greater{}, p),
                    [&potentials](auto&& _uio) noexcept {
                      auto&& [u, i, o] = _uio;
                      // return std::optional{0.0};
  
                      // In original MarkovJunior code, we use int-coded bitset for rule input,
                      // and the following type-mismatch is solved using a mysterious "least index of active bit"
                      // which is very dependant to the specific fact that we use an _ordered_ repr. of a bitset...
                      // That's magic ! 
                      // .. unless that bit is expected to be the only one active
                      //
                      // Original code (our 'i' is the 'w'): `System.Numerics.BitOperations.TrailingZeroCount(w)`
                      // Or is the provided order of the symbols so important that we need to move rule.input to an ordered set ?
                      // return potentials.contains(i)
                      //   ? potentials.at(i)[u]
                      //   : std::optional{0u};

                      auto&& e = *i
                        | std::views::filter([&potentials, &u](auto&& i) noexcept {
                            return potentials.contains(i)
                               and potentials.at(i)[u] != std::numeric_limits<double>::infinity();
                        })
                        | std::views::transform([&potentials, &u](auto&& i) noexcept {
                            return potentials.at(i)[u];
                        })
                        | std::ranges::to<std::set>();
                      if (std::ranges::empty(e)) return std::numeric_limits<double>::infinity();
  
                      return *std::ranges::max_element(e);
                    }
                  );
              })
              | std::views::join;
          }
        )
        | std::views::join
        | std::views::filter([&potentials](auto&& _uio) noexcept {
            auto&& [u, i, o] = _uio;
            return o != std::nullopt
               and potentials.contains(*o)
               and potentials.at(*o)[u] == std::numeric_limits<double>::infinity();
        })
        | std::views::transform([&potentials, new_p](auto&& _uio) noexcept {
            auto&& [u, i, o] = _uio;
            potentials.at(*o)[u] = new_p;
            return std::make_pair(*o, u);
        });
    }
  );

  return potentials;
}

export 
struct SearchEngine {
  bool search;
  std::optional<UInt> limit;
  double depthCoefficient;
  std::unordered_map<symbol, Observation> observations;
  Grid<std::optional<std::unordered_set<symbol>>> future;
  std::queue<std::vector<Change<symbol>>> trajectory;

  inline constexpr auto updateFuture(Grid<symbol>::ConstView grid, std::span<const RewriteRule> rules) noexcept -> decltype(auto) {
    if (not std::ranges::empty(future)) {
      return std::vector<Change<symbol>>{};
    }

    auto&& [changes, _future] = ::future(observations, grid);
    future = _future;

    // if (not search) return backwardMap(future, rules);

    return changes;
  }

  inline constexpr auto followTrajectory() noexcept -> decltype(auto) {
    if (std::ranges::empty(trajectory)) {
      return std::vector<Change<symbol>>{};
    }
    auto changes = trajectory.front();
    trajectory.pop();
    return changes;
  }
};