export module inference;

import std;
import glm;
import stormkit.Core;
import utils;
import geometry;

import grid;
import rule;

using namespace stormkit;
using symbol = char;
using grid_view = std::mdspan<const symbol, std::dims<3>>;
using potential_view = std::mdspan<std::optional<UInt>, std::dims<3>>;

inline constexpr auto propagate(auto&& initial, auto&& unfold) noexcept -> decltype(auto) {
  for (
    auto&& q = initial | std::ranges::to<std::queue>();
    not std::ranges::empty(q);
    q.pop()
  ) q.push_range(unfold(q.front()));
}

export
struct DijkstraField {
  bool recompute, essential, inversed;
  std::optional<std::unordered_set<symbol>> substrate, zero;

  static inline constexpr auto parse(
    bool recompute, bool essential,
    std::string_view on,
    std::string_view from,
    std::string_view to
  ) noexcept -> decltype(auto) {
    static constexpr auto IGNORED = '*';
    auto&& zero = std::ranges::empty(from) ? to : from;
    return DijkstraField{
      recompute, essential,
      not std::ranges::empty(from),
      on == std::format("{}", IGNORED) ? std::nullopt : std::optional{on | std::ranges::to<std::unordered_set>()},
      zero == std::format("{}", IGNORED) ? std::nullopt : std::optional{zero | std::ranges::to<std::unordered_set>()}
    };
  }

  inline constexpr auto dijkstraMap(grid_view grid) const noexcept -> decltype(auto) {
    const auto g_sentinel = toSentinel(grid.extents());
    const auto neighborhood = [&g_sentinel](const math::Vector3U& u) noexcept {
      constexpr auto neigh_size = math::Vector3U{3, 3, 3};
      constexpr auto neigh_shift = -static_cast<math::Vector3I>(neigh_size / 2u);
      const auto neigh = Area<3, Int>{neigh_shift, neigh_size} + static_cast<math::Vector3I>(u);
      const auto n = static_cast<Area3U>(Area<3, Int>{g_sentinel}.meet(neigh));

      ensures(
        math::all(math::equal(n.size - math::Vector3U{0, 0, n.size.z}, {neigh_size.x, neigh_size.y, 0}))
        or math::any(math::equal(n.u + math::Vector3U{0, 0, 1}, {0, 0, 0}))
        or math::any(math::equal(n.sentinel() + math::Vector3U{0, 0, 1}, g_sentinel)),
        "bad boundary !!"
      );

      return n;
    };

    auto potential = Grid<std::optional<UInt>>{grid.extents(), std::nullopt};
    propagate(
      mdiota({g_sentinel})
        | std::views::filter([&zero{zero}, &grid](auto&& u) noexcept {
            return zero == std::nullopt
                or zero->contains(grid[u.z, u.y, u.x]);
        })
        | std::views::transform([&potential](auto&& u) noexcept {
            potential[u] = 0u;
            return std::make_pair(u, 0u);
        }),
      [&substrate{substrate}, &potential, &grid, &neighborhood]
      (auto&& front) noexcept {
        auto&& [u, value] = front;
        return mdiota(neighborhood(u))
          | std::views::filter([&substrate, &potential, &grid](auto&& n) noexcept {
              return potential[n] == std::nullopt
                 and (substrate == std::nullopt
                   or substrate->contains(grid[n.z, n.y, n.x])
                 );
          })
          | std::views::transform([&potential, &value](auto&& n) noexcept {
              potential[n] = value + 1;
              return std::make_pair(n, value + 1);
          });
      }
    );

    return potential;
  }
};

export struct Observation {
  symbol from;
  std::unordered_set<symbol> to;
};

// inline constexpr auto future(std::unordered_map<symbol, const Observation> obs, grid_view grid) noexcept -> decltype(auto) {
//   auto changes = std::vector<Change<symbol>>{};
//   auto f = mdiota(grid.extents())
//     | std::views::transform([&obs, &changes, &grid](auto&& u) noexcept {
//         auto&& c = grid[u.z, u.y, u.x];
//         if (not obs.contains(c)) return std::optional<std::unordered_set<symbol>>();
//         changes.emplace_back(c, obs.at(c).from);
//         return std::optional{obs.at(c).to};
//     })
//     | std::ranges::to<Grid<bool>>(grid.extents());

//   return std::make_pair(std::move(changes), std::move(f));
// }

inline constexpr auto forward(
  grid_view grid,
  std::span<const Rule> rules
) noexcept -> decltype(auto) {
  auto potentials = std::unordered_map<symbol, Grid<std::optional<UInt>>>{};

  propagate(
    mdiota(grid.extents())
      | std::views::transform([&grid, &potentials](auto&& u) noexcept {
          auto&& c = grid[u.z, u.y, u.x];
          potentials.try_emplace(c, grid.extents(), std::nullopt);
          potentials.at(c)[u] = 0u;
          return std::make_pair(c, u);
      }),
    [&potentials, &rules](auto&& front) noexcept {
      auto&& [c, u] = front;
      auto&& potential = potentials.at(c);
      const auto p_sentinel = toSentinel(potential.extents);
      auto&& p = *potential[u];
  
      return rules 
        | std::views::transform(
          [updateZone{bindBack(&Rule::neighborhood, u, p_sentinel)}, &potentials, &p]
          (auto&& rule) noexcept {
            return mdiota(updateZone(rule))
              | std::views::transform([&rule](auto&& u) noexcept {
                  return std::views::zip(
                    mdiota({u, toSentinel(rule.input.extents)}),
                    rule.input,
                    rule.output
                  );
              })
              | std::views::filter([&potentials, &rule, &p](auto&& _uios) noexcept {
                  return std::ranges::none_of(
                    _uios | std::views::filter([](auto&& _uio) static noexcept {
                      auto&& [u, i, o] = _uio;
                      return i != std::nullopt;
                    }),
                    [&p](auto&& v) noexcept {
                      return v == std::nullopt
                          or *v > p;
                    },
                    [&potentials](auto&& _uio) noexcept {
                      auto&& [u, i, o] = _uio;
  
                      // In original MarkovJunior code, we use int-coded bitset for rule input,
                      // and the following type-mismatch is solved using a mysterious "least index of active bit"
                      // which is very dependant to the specific fact that we use an _ordered_ repr. of a bitset...
                      // That's magic !
                      //
                      // Original code (our 'i' is the 'w'): `System.Numerics.BitOperations.TrailingZeroCount(w)`
                      // Or is the provided order of the symbols so important that we need to move rule.input to an ordered set ?
                      // return potentials.contains(i)
                      //   ? potentials.at(i)[u]
                      //   : std::optional{0u};
  
                      return std::optional{0u};
                    }
                  );
              })
              | std::views::join;
          }
        )
        | std::views::join
        | std::views::filter([&potentials](auto&& _uio) noexcept {
            auto&& [u, i, o] = _uio;
            return o != std::nullopt
               and potentials.contains(*o)
               and potentials.at(*o)[u] == std::nullopt;
        })
        | std::views::transform([&potentials, &p](auto&& _uio) noexcept {
            auto&& [u, i, o] = _uio;
            potentials.at(*o)[u] = p + 1;
            return std::make_pair(*o, u);
        });
    }
  );

  return potentials;
}
