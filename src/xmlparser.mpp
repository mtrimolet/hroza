export module xmlparser;

import std;
import stormkit.core;
import utils;

import pugixml;

import rewriterule;         // <rule>
import dijkstraengine;      // <field>
import observationengine;   // <observe>
import rulenode;            // <one>, <prl>, <all>
import executionnode;       // <sequence>, <markov>

using namespace stormkit;
using namespace std::literals;

export {

namespace xmlparser {

struct Model {
  // std::string_view title;
  std::string symbols;
  bool origin;
  ExecutionNode program;
};

auto parseXmlModel(const pugi::xml_document& xmodel) noexcept -> Model;

inline auto loadXmlBuffer(std::span<const std::byte> buffer) noexcept -> decltype(auto) {
  auto xmodel = pugi::xml_document{};
  auto&& result = xmodel.load_buffer(std::data(buffer), std::size(buffer));
  ensures(result, std::format("Error while parsing xml (<buffer>:{}) : {}", result.offset, result.description()));
  return parseXmlModel(xmodel);
}

inline auto loadXmlFile(const std::filesystem::path& filepath) noexcept -> decltype(auto) {
  auto xmodel = pugi::xml_document{};
  auto&& result = xmodel.load_file(filepath.c_str());
  ensures(result, std::format("Error while parsing xml ({}:{}) : {}", filepath.generic_string(), result.offset, result.description()));
  return parseXmlModel(xmodel);
}

auto parseXmlNode(
  const pugi::xml_node& xnode,
  RewriteRule::Unions unions = {},
  std::string_view symmetry = ""
) noexcept -> ExecutionNode;

auto parseXmlRuleNode(
  const pugi::xml_node& xnode,
  RewriteRule::Unions unions = {},
  std::string_view symmetry = ""
) noexcept -> Action;

auto parseXmlRule(
  const pugi::xml_node& xnode,
  RewriteRule::Unions unions = {}
) noexcept -> RewriteRule;

inline auto parseXmlRules(
  const pugi::xml_node& xnode,
  RewriteRule::Unions unions = {},
  std::string_view symmetry = ""
) noexcept -> decltype(auto) {
  auto xrules = xnode.children("rule") | std::ranges::to<std::vector>();
  if (std::ranges::empty(xrules)) xrules.push_back(xnode);
  return std::move(xrules)
     | std::views::transform(bindBack(parseXmlRule, unions))
     | std::views::transform(bindBack(RewriteRule::symmetries, symmetry))
     | std::views::join
     | std::ranges::to<std::vector>();
}

auto parseXmlField(const pugi::xml_node& xnode) noexcept -> std::pair<char, DijkstraField>;

inline auto parseXmlFields(const pugi::xml_node& xnode) noexcept -> decltype(auto) {
  return xnode.children("field")
    | std::views::transform(parseXmlField)
    | std::ranges::to<DijkstraFields>();
}

auto parseXmlObservation(const pugi::xml_node& xnode) noexcept -> std::pair<char, Observation>;

inline auto parseXmlObservations(const pugi::xml_node& xnode) noexcept -> decltype(auto) {
  return xnode.children("observe")
    | std::views::transform(parseXmlObservation)
    | std::ranges::to<std::unordered_map>();
}

using Color32 = UInt32;
using Palette = std::unordered_map<char, Color32>;

auto parseXmlPalette(std::filesystem::path filepath) noexcept -> Palette;

}
}
