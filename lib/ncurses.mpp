module;
#include <ncurses.h>
#undef getmaxyx
#undef inchstr
#undef addch
#undef addchstr
export module ncurses;

import std;

export using chtype = chtype;

export namespace ncurses {
struct window {
public:
  window(auto height, auto width) : window{0, 0, height, width} {}
  window(auto start_y, auto start_x, auto height, auto width) {
    if (!windows++) {
      initscr();   // init ncurses root window
      cbreak();    // don't wait for line break, receive each character
      noecho();    // disable input echo
      curs_set(0); // hide cursor

      start_color();
      use_default_colors();
    }
    win = newwin(height + 2, width + 2, start_y, start_x);
    ::refresh(); // refresh root window

    // keypad(win, true); // capture non-textual keys (arrows, numpad, ...)
    nodelay(win, true);
    leaveok(win, true);
    // keys = std::vector<int>{};

    clear();
  }

  ~window() {
    delwin(win);
    if (!--windows) {
      wgetch(stdscr);
      endwin();
    }
  }

  inline constexpr auto getmaxyx() const -> decltype(auto) {
    return std::make_tuple(getmaxy(win) - 2u, getmaxx(win) - 2u);
  }

  inline constexpr auto say(std::string_view txt) -> void {
    auto&& [row, col] = getmaxyx();
    clear();
    mvwaddstr(win, row / 2, (col - std::size(txt)) / 2, std::data(txt));
    refresh();
  }

  inline constexpr auto refresh() -> void {
    wrefresh(win);
  }

  inline constexpr auto clear() -> void {
    wclear(win);
  }

  inline constexpr auto inchstr(auto y, auto x, auto width) -> decltype(auto) {
    auto&& [rows, cols] = getmaxyx();

    y = (y % rows) + 1;
    x = (x % cols) + 1;

    const auto overflow = std::max(0ul, x + width - cols);
    auto data = std::vector<chtype>(width + 1);

    mvwinchnstr(win, y, x, std::data(data), width - overflow);
    if (overflow) {
      mvwinchnstr(win, y, 1, std::data(data) + width - overflow, overflow);
      wmove(win, y, x);
    }

    data.resize(width);
    return data;
  }

  inline constexpr auto hascolors() const -> decltype(auto) {
    return has_colors();
  }

  inline constexpr auto canchangecolor() const -> decltype(auto) {
    return can_change_color();
  }
  
  
  inline constexpr auto setpalette(std::span<const std::uint32_t> colors) -> void {
    if (canchangecolor()) 
      std::ranges::for_each(
        std::views::zip(colors, std::views::iota(0u))
          | std::views::take(COLORS),
        [](auto&& t) noexcept {
          auto&& [i, r, g, b] = t;
          init_color(i, r, g, b);
          init_pair(i, i, -1);
        },
        [](auto&& t) noexcept {
          auto&& [c, i] = t;
          static constexpr auto MAX_COLOR_VALUE = 1000;
          static constexpr auto COLOR_RATIO = MAX_COLOR_VALUE / 0xff;
          const short
            r = ((c >> 16) & 0x000000ff) * COLOR_RATIO,
            g = ((c >> 8)  & 0x000000ff) * COLOR_RATIO,
            b = ( c        & 0x000000ff) * COLOR_RATIO;
          return std::make_tuple(i, r, g, b);
        }
      );
    else 
      std::ranges::for_each(
        std::views::iota(0u, std::ranges::size(colors))
          | std::views::take(COLORS),
        [](auto&& i) noexcept {
          init_pair(i, i, -1);
        }
      );
  }

  inline constexpr auto addch(auto y, auto x, chtype ch) -> void {
    const auto &[rows, cols] = getmaxyx();
    mvwaddch(win, (y % rows) + 1, (x % cols) + 1, ch);
  }

  inline constexpr auto addch(auto y, auto x, chtype ch, auto c) -> void {
    const auto &[rows, cols] = getmaxyx();
    wattron(win, COLOR_PAIR(c));
    mvwaddch(win, (y % rows) + 1, (x % cols) + 1, ch);
    wattroff(win, COLOR_PAIR(c));
  }

  inline constexpr auto addchstr(auto y, auto x, std::span<const chtype> data) -> void {
    const auto &[rows, cols] = getmaxyx();

    const auto width    = std::size(data);
    const auto overflow = std::max(0ul, x + width - cols);

    y = (y % rows) + 1;
    x = (x % cols) + 1;

    mvwaddchnstr(win, y, x, std::data(data), width - overflow);
    if (overflow) {
      mvwaddchnstr(win, y, 1, std::data(data) + width - overflow, overflow);
    }
  }

  inline constexpr auto getchar(auto ch) -> decltype(auto) { return has_key(ch) != 0; }

  inline constexpr auto waitchar() -> decltype(auto) {
    nodelay(win, false);
    const auto c = wgetch(win);
    nodelay(win, true);
    return c;
  }

private:
  inline static auto windows = 0u;
  WINDOW *win;
};
}