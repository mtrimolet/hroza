export module sort;

import std;

export struct sort_fn
{
    template<std::random_access_iterator I, std::sentinel_for<I> S,
             class Comp = std::ranges::less, class Proj = std::identity>
    requires std::sortable<I, Comp, Proj>
    constexpr I
        operator()(I first, S last, Comp comp = {}, Proj proj = {}) const
    {
        if (first == last)
            return first;
 
        I last_iter = std::ranges::next(first, last);
        std::ranges::make_heap(first, last_iter, std::ref(comp), std::ref(proj));
        std::ranges::sort_heap(first, last_iter, std::ref(comp), std::ref(proj));
 
        return last_iter;
    }
 
    template<std::ranges::random_access_range R, class Comp = std::ranges::less,
             class Proj = std::identity>
    requires std::sortable<std::ranges::iterator_t<R>, Comp, Proj>
    constexpr std::ranges::borrowed_iterator_t<R>
        operator()(R&& r, Comp comp = {}, Proj proj = {}) const
    {
        return (*this)(std::ranges::begin(r), std::ranges::end(r), std::move(comp), std::move(proj));
    }
};

export inline constexpr sort_fn sort {};
